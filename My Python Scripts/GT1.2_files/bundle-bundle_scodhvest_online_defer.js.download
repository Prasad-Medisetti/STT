
var requestDojo="";
var url = "";

/* Just Normal Redirect Calls for Flowchart - Start */

function redirectUrlWithWarning(pUrl) {
    flag = 0;
    if(confirm("Are you sure?"))
        flag = 1;
    if(flag == 1) {
        window.location.href = pUrl;
    }
    
}

/* Just Normal Redirect Calls for Flowchart - End */


/* Get Batches for Institution - Start */
function getBatchesForInstitution(pUrl) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:getProblemsForContestReady,
        error:errorCall,
        handleAs: "xml",
        content: {"selectedContest":document.getElementById("selectedContest").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
}

function getBatchesForInstitutionReady(data) {

}
/* Get Batches for Institution - End */

/* Problem multiple files upload Start */

function uploadFile(pUrl,pfollowUrl,formname) {
    showWait();
    dojo.io.iframe.send({
    url: pUrl,
    method: "post",
    form: dojo.byId(formname),
    handle: function(data,ioArgs){
        followUpUpload(pfollowUrl);
    }
  });

}

/* Contest Problems - Add Existing Problems Start */
function addProblemsToProblemPool(pUrl) {
    showWait();
    var selectedProblems = loopSelected(document.getElementById('selectedProblems'));
    requestDojo = {
        url:pUrl,
        load:addProblemsToProblemPoolReady,
        error:errorCall,
        content: {"selectedProblems":selectedProblems,"selectedPool":document.getElementById("id").value,
            "dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);

}
function addProblemsToProblemPoolReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById('response').innerHTML = data;
}

function addProblemsToContest(pUrl) {
    showWait();
    var selectedProblems = loopSelected(document.getElementById('selectedProblems'));
    requestDojo = {
        url:pUrl,
        load:addSingleProblemToContestReady,
        error:errorCall,
        content: {"selectedProblems":selectedProblems,"selectedContest":document.getElementById("id").value,
            "dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);

}
/*
function addProblemsToContestReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById('response').innerHTML = data;
}
*/




/* Contest Problems - Add Existing Problems End */

/* Contest Query Handling - Start */
function updateQueryDetails(pUrl) {
    dijit.byId('queryDetailsDivDialog').hide();
    requestDojo = {
        url:pUrl,
        load:updateQueryDetailsReady,
        error:errorCall,
        content: {"id":document.getElementById('queryid').value,"response":document.getElementById('response').value,
            "valid":document.getElementById('valid').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
}
function updateQueryDetailsReady(data)  {
    data = checkCommonIssues(data);
    document.getElementById('queryUpdateResponseDiv').innerHTML = data;
}
function showDialogQueryDetails(pUrl,id) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:showDialogQueryDetailsReady,
        error:errorCall,
        content: {"id":id,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);

}
function showDialogQueryDetailsReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById('queryDetailsDiv').innerHTML = data;
    dijit.byId('queryDetailsDivDialog').show();
}
function viewQueriesForJudge(pUrl) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:viewQueriesForJudgeReady,
        error:errorCall,
        content: {"selectedProblemQuery":document.getElementById("selectedProblemQuery").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);

}
function viewQueriesForJudgeReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById('queriesDiv').innerHTML = data;
    for(var i=0;i<50;i++) {if(dijit.byId("p"+i)) dijit.byId("p"+i).destroy();}
    if(dijit.byId('queryDetailsDivDialog')) dijit.byId('queryDetailsDivDialog').destroy();
    dojo.parser.parse('queriesDiv');

}
/* Contest Query Handling - End */




/* Problem Query Start */

function submitQuery(pUrl) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:postQueryReady,
        error:errorCall,
        form:document.getElementById('queryForm'),
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
}

function postQueryReady(data) {
    data = checkCommonIssues(data);
    document.getElementById("queryDiv").innerHTML = data;
    hideWait();
}

function showQueries(pUrl) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:showQueriesReady,
        error:errorCall,
        form:document.getElementById('queryForm'),
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
}

function showQueriesReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById("queryDiv").innerHTML = data;
    for(var i=0;i<50;i++) {if(dijit.byId("p"+i)) dijit.byId("p"+i).destroy();}
    dojo.parser.parse('queryDiv');
}

/* Problem Query End */


/* THis fn is removed, remove it later */
function getUsersForDashboardCourseStatus(pUrl,compid,probid,rolename,status) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:getUsersForDashboardCourseStatusReady,
        error:errorCall,
        content: {"compid":compid,"probid":probid,"rolename":rolename,"status":status,
            team:document.getElementById('selectedTeam').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
    
}

function getUsersForDashboardCourseStatusReady(data) {
    hideWait();
    document.getElementById("dataShowDesc").innerHTML = data;
    dijit.byId('dataShowDialog').startup();
    dijit.byId('dataShowDialog').show();
    
    
}


function selectInterval() {
    dijit.byId('intervalSelectionDialog').startup();
    dijit.byId('intervalSelectionDialog').show();
}

function closeIntervalDialog(pUrl) {
    document.getElementById('selectedInterval').value = document.getElementById('interval').value;
    dijit.byId('intervalSelectionDialog').hide();
    currentContestStatus(pUrl);
}


function showContestSolvedScore(pUrl,cid) {
    showWait();
    var seluser = document.getElementById('selectedUserContestScore').value;
    requestDojo = {
        
        url:pUrl,
        load:function(data) {
            hideWait();
            data = checkCommonIssues(data);
            document.getElementById("contestSolvedScoreDiv").innerHTML = data;
        },
        error:errorCall,
        content: {"selectedUser":seluser,"id":cid,"dummy":new Date().getTime()},
        timeout: ptimeout*100
    };
    dojo.xhrPost(requestDojo);
    
}


function showConsContestSolvedScorePdf(pUrl) {
    dojo.io.iframe.send({
    url: pUrl,
    method: "post",
    timeout: 5,
    form: dojo.byId('solvedContestForm'),
    content: {
        _export: 'pdf'
    }
  });
}
function showContestSolvedScorePdf(pUrl,id) {
    showWait();
    var seluser = null
    var selectedTeams = '';
    if(document.getElementById('selectedUserContestScore')!=null)
        seluser = document.getElementById('selectedUserContestScore').value;
    if(document.getElementById('selectedTeamContestScore')!=null)
        selectedTeams = loopSelected(document.getElementById('selectedTeamContestScore'));
    
    requestDojo = {
        url:pUrl,
        load:showContestSolvedScoreReady,
        error:errorCall,
        content: {"id":id,"selectedUser":seluser,"selectedTeam":selectedTeams,  "dummy":new Date().getTime()},
        timeout: ptimeout*100
    };
    dojo.xhrPost(requestDojo);

}

function showContestSolvedScoreReady(data) {
    data = checkCommonIssues(data);
    document.getElementById("contestSolvedScoreDiv").innerHTML = data;
    hideWait();
}
function showCourseContestStatus(pUrl) {
    dojo.io.iframe.send({
    url: pUrl,
    method: "post",
    timeout: 5,
    form: dojo.byId('courseContestStatusForm'),
    content: {
        _export: 'pdf'
    }
  });
}


/* Skill Classifier End */

function showProblemDescription(pUrl,probid) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:showProblemDescriptionReady,
        error:errorCall,
        content: {"selectedProblemId":probid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);    
}
function showProblemDescriptionReady(data) {
    hideWait();
    data = checkCommonIssues(data);
    document.getElementById("problemDescriptionDesc").innerHTML = data;
    dijit.byId('problemDescriptionDialog').startup();
    dijit.byId('problemDescriptionDialog').show();
}
/* Show Submission List for User and problem End */
/* Programming Code Editor Start */


function getProjectEditor(pUrl) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:getProjectEditorReady,
        error:errorCall,
        content:{"selectedLang":document.getElementById('selectedLang').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);
}



function getProjectEditorReady(data) {
    
    hideWait();
    data = checkCommonIssues(data);
    //document.getElementById('editorFrame').innerHTML = data;
    //$("#editorFrame").attr('src', apacheUrl+"/codiad/code.php?k="+data);
    $("#editorFrame").attr('src', grailsUrl+"/selectProjectEditor?selectedLang=7");
    //alert(grails)
    //$("#editorFrame").attr('src', grailsUrl+"/codiad/code.php?k="+data);
    $("#editorFrame").attr('width',"100%");
    $("#editorFrame").attr('height',"600px");    
    document.getElementById('editorFrame').style.display = 'block';
    //document.getElementById('saveworkspacelink').style.visibility = 'visible';
    document.getElementById('compileworkspacelink').style.visibility = 'visible';
    document.getElementById('executeworkspacelink').style.visibility = 'visible';
    document.getElementById('submitworkspacelink').style.visibility = 'visible';
    
    
    /*
    $(document).keypress(function(event) {
            resizeEditor(event);
    });
    
    $("#editorFrame").keypress(function(event) {
            resizeEditor(event);
    });
    */
    
}

function winHeight() {
  return window.innerHeight || (document.documentElement || document.body).clientHeight;
}

var flag = 0;
function resizeEditor(event) {
    var e= document.getElementById('projectEditor')
    alert(e)
    
    if(event.keyCode == 122) {
        if (RunPrefixMethod(document, "FullScreen") || RunPrefixMethod(document, "IsFullScreen")) {
                alert("1");
                RunPrefixMethod(document, "CancelFullScreen");
        }
        else {
                alert("2");
                RunPrefixMethod(e, "RequestFullScreen");
        }            
        
        if(flag == 0) {
                /*
                $("#editorFrame").attr('class',"fullscreen");
                $("#editorFrame").attr('height',winHeight()+"px");
                document.documentElement.style.overflow = "hidden";
                */
                flag = 1;
        } else {
                /*
                $("#editorFrame").attr('class',"");
                //$("#editorFrame").attr('height',"600px");
                document.documentElement.style.overflow = "";
                */
                flag = 0;
        }
        event.preventDefault();
    }
}

/* Programming Code Editor End */

/* Learning Components Creation related Dojo - Start */


/* Learning Components Creation related Dojo - End */


/* Dashboard - start */
function showEditorStatisticsFromDashboard(pUrl,probid,compid,userid) {
    showWait();
    requestDojo = {
        url:pUrl,
        load:getUsersForDashboardCourseStatusReady,
        error:errorCall,
        content: {"editorprobid":probid,"editoruserid":userid,"compid":compid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    dojo.xhrPost(requestDojo);    
    
}

/* Dashboard - end */

/* Dbms Start */

//CKEDITOR.replace('description',{toolbar:'Basic'});

/* Dbms End */



// Need to Migrate these to Jquery


/*Editor Tracking - Global params Start */
var timeCount = new Array();
var codeCount = new Array();
var keywordCount = new Array();
var metricIndex = 0;
var keyList;
var metricString = '';
var pid;
var requestObj;
var initdbmsquery = "";
var initcode = "";
var editortrackinterval = 10000; //10 seconds
var codeEditorProgram = "";
var getMetricsFromCodeObj = "";
var statusCallCount = 0;
var proStatusCallCount = 0;
/*Editor Tracking - Global params End */

/* Get Time - Global Method - Start */

function updateTime() {
        requestObj = {
            url: contextPath+'/contestComponent/showCurrentTime',
            type:'POST',
            data: {"dummy":new Date().getTime()},
            timeout: ptimeout,
            error: errorCall,
            success: function(data, textStatus) {
                data = checkCommonIssues(data);
                document.getElementById("currentTimeLong").value = data;
                metricString = "";
                timeCount = new Array();
                codeCount = new Array();
                keywordCount = new Array();
                metricIndex = 0;
                timeCount[metricIndex] = parseInt(document.getElementById('currentTimeLong').value,10);
                codeCount[metricIndex] = codeEditor.getValue().length;
                keywordCount[metricIndex] = countKeywordsFromCode(codeEditor.getValue());
                metricString = metricString+timeCount[metricIndex]+","+codeCount[metricIndex]+","+keywordCount[metricIndex]+",";
                metricIndex++;
            }
        };
        $.ajax(requestObj);
}
/* Get Time - Global Method - End */

/* Compile Execute Program - Start */

function executeSystemTestcase(pUrl,showModal) {
        clearTimeout(getStatusCall);
        $("#sendForSub").prop("disabled",false);
        document.getElementById("savetype").value = 6
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"selectedLangId":document.getElementById("selectedLangId").value,"dummy":new Date().getTime(),"execprobid":document.getElementById("execprobid").value,
                "id":document.getElementById("componentId").value,"asuaId":document.getElementById('asuaId').value,"savetype":document.getElementById("savetype").value,"readOnlyLines":codeEditor.obtainReadOnlyLines()},
            success: function(data, textStatus) {
                    $("#observations").hide();
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    if(showModal == undefined || showModal == null){
                        $('#systemTestcaseDialog').modal('show');
                    }
                    else{
                        $('#systemTestcaseDialog').show();
                        smoothScrollTo('systemTestcaseDialog');
                    }
            }
        };
        showWait();
        $.ajax(requestObj);

}
function dpExecuteSystemTestcase(pUrl) {
        document.getElementById("savetype").value = 6
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"selectedLangId":document.getElementById("selectedLangId").value,"dummy":new Date().getTime(),"execprobid":document.getElementById("execprobid").value,
                "id":document.getElementById("compid").value,"asuaId":document.getElementById('asuaId').value,"savetype":document.getElementById("savetype").value},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');
            }
        };
        showWait();
        $.ajax(requestObj);

}

function verifyWGPSolution(pUrl) {
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"selectedLangId":document.getElementById("selectedLangId").value,"dummy":new Date().getTime(),"execprobid":document.getElementById("execprobid").value},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');
            }
        };
        showWait();
        $.ajax(requestObj);

}
function projectExecuteSystemTestcase(pUrl) {
        var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
        if(selectedLang.toLowerCase() === "selenium"){
            validateSeleniumApplication();
        }else{
            console.log("In Other Block!!");
            requestObj = {
                url: pUrl,
                type:'POST',
                error: errorCall,
                timeout: ptimeout,
                data: {"selectedLangId":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
                success: function(data, textStatus) {
                        data = checkCommonIssues(data);
                        document.getElementById("systemTestcase").innerHTML = data;
                        hideWait();
                        $('#systemTestcaseDialog').modal('show');
                }
            };
            showWait();
            $.ajax(requestObj);
        }
}

function projectExecuteSolutionTestcase(pUrl) {
    var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
    if(selectedLang.toLowerCase() === "selenium"){
        validateSeleniumApplication();
    }else{
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"selectedLangId":document.getElementById("selectedLang").value,"selectedDBLangId":document.getElementById('selectedDBLang').value,"dummy":new Date().getTime()},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');
            }
        };
        showWait();
        $.ajax(requestObj);
    }
}

function validateSeleniumApplication() {
    showWait();
    var selectedLang = document.getElementById("selectedLang").value;
    $.ajax({
        url: contextPath+'/projectComponent/validateSeleniumProject',
        data: {"selectedLang":selectedLang},
        success: function(data) {
            document.getElementById('systemTestcase').innerHTML = data;
            hideWait();
            $('#systemTestcaseDialog').modal('show');
        },
        error: function() {
            alert("Unable to execute the application");
            errorCall()
        }
    });
}

function showTestcaseBySequence(pUrl) {

        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"selectedLangId":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');
            }
        };
        showWait();
        $.ajax(requestObj);

}

function showTestcaseBySequenceNew(pUrl) {
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"selectedLangId":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcaseHint").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');
            }
        };
        showWait();
        $.ajax(requestObj);
}

function showPreviousSubmissions(id) {
        var divId = id;
        if(document.getElementById(id).style.display == 'none'){
            $('#'+divId).slideDown(100, function() {
                $('#'+divId).show();
            });
        }
        else {
            $('#'+divId).slideUp(100, function() {
                $('#'+divId).hide()
            });
        }
}
function traceButtonClick(pUrl) {
        var xurl;
        xurl = pUrl+"?selectedLangId="+document.getElementById("selectedLangId").value+"&execprobid="+document.getElementById("execprobid").value+
                "&id="+document.getElementById("componentId").value+"&asuaId="+document.getElementById('asuaId').value;
        window.open(xurl);
}

function processWGPSolution(pUrl, pOp) {
    showWait();
    requestObj = {
        url: pUrl,
        type:'POST',
        error: errorCall,
        timeout: ptimeout,
        data: {"program":codeEditor.getValue(),"operation":pOp,"selectedLangId":document.getElementById("selectedLangId").value,
            "execprobid":document.getElementById("execprobid").value,
            "dummy":new Date().getTime()},

        success: function(data, textStatus) {
            data = checkCommonIssues(data);
            $("#observations").css("display","block");
            document.getElementById("observations").innerHTML = data;
            if(data.indexOf('Program Saved Successfully....',0) > 0 || data.indexOf('Compilation Successful',0) > 0) {
                $("#observations").attr("class","alert alert-success");
            }
            else if(data.indexOf('Compilation Errors',0) > 0) {
                $("#observations").attr("class","alert alert-danger");
            }
            else if(data.indexOf('Sorry ! You have exceeded the allowed number of submissions',0) > 0) {
                $("#observations").attr("class","alert alert-danger");
            }
            else if(data.indexOf('Your Code has been sent for evaluation successfully',0) > 0) {
                $("#observations").attr("class","alert alert-success");
            }
            hideWait();
        }
    };
    $.ajax(requestObj);
}

var timerVal = 0, infiniteMessagePushTimeout;
function updateSubmissionStatus(data, type){
    if(Number(""+$("#compid").val()) === Number(""+data.componentId) && 
       Number(""+$("#probId").val()) === Number(""+data.problemId)){
        if(data.type === "message"){
            if($("#prob-status-text").length < 1)
                updateSubmissionStatusResult();
            $("#prob-status-text").html("<span>"+data.content+"</span>");
            clearTimeout(infiniteMessagePushTimeout);
            if(data.content.indexOf("Test case evaluation progress") !== -1){
                infiniteMessagePushTimeout = setTimeout(function(){
                    $("#prob-status-text").html("<span>"+data.infiniteLoopPushMessage+"</span>");                    
                },data.infiniteLoopPushMessageTimeout);
            }
        }
        if(data.content.indexOf("Evaluation completed") === 0 || data.type === ""){
            if(type === "program")
                programSubmissionStatus($("#userSubStatusLink").val());
            if(type === "project")
                projectSubmissionStatus($("#userProSubStatusLink").val(),0);                
        }
    }
}

function updateProgramSubmissionStatusLive(data){
    updateSubmissionStatus(data,"program");
}

function updateProjectSubmissionStatusLive(data){
    updateSubmissionStatus(data,"project");
}

function updateSubmissionStatusResult(){
    var askMentorUrl = contextPath+"/doubtThread/doubtThreadPanelForParticipant?loadDoubt=false";
    var html1 = ["<div class='popover-wrapper-status'>",
            "<div class='problem-status-content'>",
                "<p id='prob-status-text'>Your code is successfully submitted for evaluation</p>",
                "<div class='btn-section'>",
                    "<a href='' class='btn ebox-btn border-btn' onclick=\"openModalDoubtThreadPanel('"+askMentorUrl+"')\" >ASK MENTOR</a>",
                "</div>",
            "</div>",
        "</div>"].join('\n');
    var html2 = ["<div class='col-wrapper col-wrapper-1'>",
            "<div class='img-wrapper'>",
                "<img src='"+$("#waiting-time-img").attr("src")+"' style='height: 155px;margin: 15px 25px;'>",
            "</div>",    
        "</div>",
        "<div class='col-wrapper col-wrapper-2'>",
            "<div class='attempt-status-text fail-attempt-text'>",
                "<h4>Evaluating In Progress</h4>",
                "<p id='prob-status-text' style='height: 116px;overflow: auto;margin-top: 15px;margin-left: -10px;'><span>Your code is successfully submitted for evaluation</span></p>",
            "</div>",
        "</div>"].join('\n');
    if($("#ad-placeholder-submission-status-ad").length > 0)
        $("#submission-status-show").html(html1);
    else
        $("#submission-status-show").html(html2);
    $(".ebox-popover.attempt-status-popover").show();
    $(".ebox-popover.attempt-status-popover").css({"bottom": "-"+$("#ad-placeholder-submission-status-ad").height()+"px", "visibility": "visible"});
    setTimeout(function(){
        $(".ebox-popover.attempt-status-popover").addClass("popupshown");
    }, 2000);
}

function compileOrExecuteProgram(pUrl, pOp,savetype) {  
    var flag = 1;
    if(savetype === 2) {
        if(codeEditorProgram == "") {
            codeEditorProgram = document.getElementById("program").innerHTML;
        }
        if(codeEditorProgram == codeEditor.getValue()) {
            flag = 0;
        }
        else {
            codeEditorProgram = codeEditor.getValue();
        }
    }
    else {
        showWait();
    }
    if(flag === 1) {
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"operation":pOp,"selectedLangId":document.getElementById("selectedLangId").value,
                "savetype":savetype,"metricString":metricString.substring(0,metricString.length-1),"execprobid":document.getElementById("execprobid").value,
                "id":document.getElementById("componentId").value,"fileupload":"false","dummy":new Date().getTime(),"asuaId":document.getElementById('asuaId').value,"readOnlyLines":codeEditor.obtainReadOnlyLines()},

            success: function(data, textStatus) {
                if(savetype != 2) { // To avoid change of div during auto save                    
                    if($(data).filter("#viewType").val() === "online" && savetype === 5 && data.indexOf('Your Code has been sent for evaluation successfully',0) > 0){
                        hideWait();
                        clearTimeout(getStatusCall);
                        if(codeEditor.getValue() != ""){
                            if($("#pushSubmissionStatusLive").length > 0 && $("#eventStreamIsAvailable").length > 0){
                                updateSubmissionStatusResult();
                            }
                            else{
                                $("#sendForSub").prop("disabled",true);
                                document.getElementById("observations").innerHTML = "Your solution is submitted for evaluation, you will see the result shortly."
                                $("#observations").attr("class","alert alert-success");
                                $("#observations").show();
                                $('#submission-status-pane').hide();
                                $('#submission-loading').jmspinner();
                                programSubmissionStatus($("#userSubStatusLink").val());
                            }
                        }else{
                            $("#observations").attr("class","alert alert-danger");
                            $("#observations").html("No Code Present...!");
                            $("#observations").show();
                            
                        }  
                    }else{
                        data = checkCommonIssues(data);
                        $("#observations").css("display","block");
                        document.getElementById("observations").innerHTML = data;
                        /*
                        if(document.getElementById("observationstabtwo")!==null)
                            document.getElementById("observationstabtwo").innerHTML = data;
                        */

                        if(data.indexOf('Program Saved Successfully....',0) > 0 || data.indexOf('Compilation Successful',0) > 0) {
                            $("#observations").attr("class","alert alert-success");
                            //$("#observationstabtwo").attr("class","alert alert-success");
                        }
                        else if(data.indexOf('Compilation Errors',0) > 0) {                            
                            $("#observations").attr("class","alert alert-danger");
                            if($(data).filter("#viewType").val() !== "online"){
                                var htmlContent = $("#observations").html();
                                $("#observations").html("<pre style='background: none;margin: 0px;padding: 0px;border: none;font-family: \"Ubuntu Mono\" !important;color:inherit;'>"+htmlContent+"</pre>");
                                //$("#observationstabtwo").attr("class","alert alert-danger");
                            }
                        }
                        else if(data.indexOf('Sorry ! You have exceeded the allowed number of submissions',0) > 0) {
                            $("#observations").attr("class","alert alert-danger");
                        }
                        else if(data.indexOf('Your Code has been sent for evaluation successfully',0) > 0) {
                            $("#observations").attr("class","alert alert-success");
                            //$("#observationstabtwo").attr("class","alert alert-success");
                        }
                        else if(data.indexOf('Please Execute and Validate before submit...',0) > 0) {
                            $("#observations").attr("class","alert alert-danger");
                        }else if(data.indexOf('Sorry ! This code matches one of your previous submissions. Try to solve the problem with different logic',0) > 0) {
                            $("#observations").attr("class","alert alert-danger");
                        }
                        hideWait();                        
                    }
                    updateTime();                    
                }                
            }
        };
        $.ajax(requestObj);
    }
}

function saveUserProgram(pUrl, pOp,savetype) {  
    var flag = 1;        
    if(document.getElementById("program") != null && document.getElementById("program") != undefined){
        if(savetype === 2) {
            if(codeEditorProgram == "") {
                codeEditorProgram = document.getElementById("program").innerHTML;
            }
            if(codeEditorProgram == codeEditor.getValue()) {
                flag = 0;
            }
            else {
                codeEditorProgram = codeEditor.getValue();
            }
        }
        showWait();    
        if(flag === 1) {
            requestObj = {
                url: pUrl,
                type:'POST',
                error: errorCall,
                timeout: ptimeout,
                data: {"program":codeEditor.getValue(),"operation":pOp,"selectedLangId":document.getElementById("selectedLangId").value,
                    "savetype":savetype,"metricString":metricString.substring(0,metricString.length-1),"execprobid":document.getElementById("execprobid").value,
                    "id":document.getElementById("componentId").value,"fileupload":"false","dummy":new Date().getTime(),"asuaId":document.getElementById('asuaId').value,"readOnlyLines":codeEditor.obtainReadOnlyLines()},

                success: function(data, textStatus) {                    
                    splitRedirect();                
                }
            };
            $.ajax(requestObj);
        }
    }
    else{
        splitRedirect(); 
    }
}

function splitRedirect(){
    showWait();
    var href = $('#split-redirectLink').val();    
    window.location.href = href;    
}

function dpCompileOrExecuteProgram(pUrl, pOp,savetype) {
    var flag = 1;
    if(savetype === 2) {
        if(codeEditorProgram == "") {
            codeEditorProgram = document.getElementById("program").innerHTML;
        }
        if(codeEditorProgram == codeEditor.getValue()) {
            flag = 0;
        }
        else {
            codeEditorProgram = codeEditor.getValue();
        }
    }
    else {
        showWait();
    }
    if(flag === 1) {
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"operation":pOp,"selectedLangId":document.getElementById("selectedLangId").value,
                "savetype":savetype,"metricString":metricString.substring(0,metricString.length-1),"execprobid":document.getElementById("execprobid").value,
                "id":document.getElementById("cmpid").value,"fileupload":"false","dummy":new Date().getTime(),"asuaId":document.getElementById('asuaId').value},

            success: function(data, textStatus) {
                console.log("data",data);
                if(savetype != 2) { // To avoid change of div during auto save
                    data = checkCommonIssues(data);
                    $("#observations").css("display","block");
                    document.getElementById("observations").innerHTML = data;
                    /*
                    if(document.getElementById("observationstabtwo")!==null)
                        document.getElementById("observationstabtwo").innerHTML = data;
                    */

                    if(data.indexOf('Program Saved Successfully....',0) > 0 || data.indexOf('Compilation Successful',0) > 0) {
                        $("#observations").attr("class","alert alert-success");
                        $("#compilation-success-indicator").show();
                         $("#observations").hide();
                        //$("#observationstabtwo").attr("class","alert alert-success");
                    }
                    else if(data.indexOf('Compilation Errors',0) > 0) {
                        $("#observations").removeAttr("style");
                        $("#observations").attr("class","alert alert-danger");
                        var htmlContent = $("#observations").html();
                        $("#observations").html("<pre style='background: none;margin: 0px;padding: 0px;border: none;font-family: \"Nunito\" !important;color:inherit;'>"+htmlContent+"</pre>");
                        $("#compilation-error-indicator").show();
                        //$("#observationstabtwo").attr("class","alert alert-danger");
                    }
                    else if(data.indexOf('Sorry ! You have exceeded the allowed number of submissions',0) > 0) {
                        $("#observations").attr("class","alert alert-danger");
                        $("#sublim-error-indicator").show();
                    }
                    else if(data.indexOf('Your Code has been sent for evaluation successfully',0) > 0) {
                        $("#observations").attr("class","alert alert-success");
                        $("#sub-success-indicator").show();
                        $("#observations").hide();
                        //$("#observationstabtwo").attr("class","alert alert-success");
                    }
                    else if(data.indexOf('Please Execute and Validate before submit...',0) > 0){
                        $("#valbefsub-indicator").show();
                        $("#observations").hide();
                    }
                    else if(data.indexOf('You already have an Accepted Status for this problem ...',0) > 0){
                        $("#observations").removeClass('alert-success').removeClass("alert-danger").removeClass("alert")
                        $("#observations").css('color','#47a88a')
                    }
                    
                    hideWait();
                }
                updateTime();
            }
        };
        $.ajax(requestObj);
    }
}
/* Compile Execute Program - End */

/* Contest Submit - Start */
function sendFileForSubmission(pUrl) {
    $.ajax({
        url:pUrl,
        type:'POST',
        success: function(data, textStatus) {
            document.getElementById("response").innerHTML = data;
        },
        error: errorCall,
        data: new FormData(document.getElementById('attemptUploadForm')),
        cache: false,
        contentType: false,
        processData: false
    });
}

function submitTsProgram(pUrl){
    showWait();
    $.ajax({
        url:pUrl,
        type:"POST",
        data: {
            "execprobid":$("#execprobid").val(),
            "attId":$("#attId").val(),
            "execcompid":$("#execcompid").val(),
            "selectedLangId":$("#selectedLangId").val()
        },
        success: function(data, textStatus) {
            $("#observations").html(data);
            $("#observations").show();
            $("#observations").addClass("alert alert-success");
            hideWait();
        },
        error: errorCall
    });
}

/* Contest Submit - End */

/* Load Editor - Start */
function countKeywordsFromCode(code) {
    var count = 0,i=0;
    for(i=0;i<keyList.length;i++) {
        var patt = new RegExp("\\s"+keyList[i],'g');
        var x = code.match(patt);
        if(x!= null) {
            count = count+x.length;
        }

    }
    return count;
}
function getMetricsFromCode() {
    //alert(document.getElementById('currentTimeLong').value);
    //alert(initcode+","+codeEditor.getValue());
    if(initcode !== codeEditor.getValue()) {
        timeCount[metricIndex] = timeCount[metricIndex-1]+editortrackinterval;
        codeCount[metricIndex] = codeEditor.getValue().length;
        keywordCount[metricIndex] = countKeywordsFromCode(codeEditor.getValue());
        metricString = metricString+timeCount[metricIndex]+","+codeCount[metricIndex]+","+keywordCount[metricIndex]+",";
        metricIndex++;
        initcode = codeEditor.getValue();
    }
    //alert(metricIndex+","+metricString);
}

function startEditorTrack() {
   /*
    codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {

        lineNumbers: true,
        matchBrackets: true,
        //theme: 'eclipse',
        autofocus :true,
        mode: document.getElementById('codemirrorlang').value,
        onFocus: function() {
//            resizeSplitPaneBottom('15%');
        }
    });
    */


    keyList = document.getElementById('keywords').value.split(',');
    getMetricsFromCodeObj = setInterval("getMetricsFromCode()",editortrackinterval);
    if(intervaltime > 0)
        saveProgramObj = setInterval("compileOrExecuteProgram('"+autosaveurl+"','save',2)",intervaltime);
    updateTime();
    if(document.getElementById("disableCopyPaste").value === "true" && document.getElementById("program") !==null ) {
        codeEditor.onCopy = function(event) { $('#rdialog').modal('show'); return false; }
        codeEditor.onCut = function(event) { $('#rdialog').modal('show'); return false; }
        codeEditor.onPaste = function(event) { $('#rdialog').modal('show'); return false; }
        $('#editorbasediv').bind('dragover drop', function(event){
            codeEditor.undo();
            $('#rdialog').modal('show');
            return false;
        });
        /*var obj = codeEditor.getWrapperElement().firstChild;
        if(obj !== null) {
            obj.oncopy = function(event) { $('#rdialog').modal('show'); return false; }
            obj.onpaste = function(event) {$('#rdialog').modal('show'); return false; }
            obj.oncut = function(event) { codeEditor.undo();$('#rdialog').modal('show'); return false; }
            $('#editorbasediv').bind('dragover drop', function(event){
                    codeEditor.undo();
                    $('#rdialog').modal('show');
                    return false;
                });
        }*/
    }
}

function saveAlgorithmTrack(){
   if(intervaltimeForAlgo > 0)
        setInterval("updateAlgorithm('"+autoSaveUrlForAlgorithm+"')",intervaltimeForAlgo);
}
function updateAlgorithm(url){
    
    var algorithm = document.getElementById('algoDiv').innerHTML;
    document.getElementById('algorithm').value = algorithm;
    $.ajax({
        url : url,
        type: "POST",
        data:{
            'algorithm':algorithm,
        },
        success:function(data){

        }
    });
}
/* Load Editor - End */

/* Program Executor - Start */

function trim(s){
        return s.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g,'').replace(/\s+/g,' ');
    }

function sendOnKeyDown(event) {
    var e;
    if(window.event)
         e = window.event;     //IE
    else
         e = event;     //firefox

    console.log(e.ctrlKey)
    console.log(e.keyCode)
    console.log(e.ctrlKey && e.keyCode === 67)
    if(e.ctrlKey && e.keyCode === 67) {
         //document.getElementById('input').value='%03';
         send(document.getElementById('comptype').value,'%03');
         return false;
    }
    else
         return true;
}

function sendOnKeyPress(event) {
         var key;
         if(window.event)
              key = window.event.keyCode;     //IE
         else
              key = event.keyCode;     //firefox

         if(key == 13) {
              send(document.getElementById('comptype').value);
              return false;
         }
         else
              return true;
      }
      
function sendOnKeyPressSub(event) {
         var key;
         if(window.event)
              key = window.event.keyCode;     //IE
         else
              key = event.keyCode;     //firefox

         if(key == 13) {
              sendForSub(document.getElementById('comptype').value);
              return false;
         }
         else
              return true;
      }

function execute(callBack) {
        if(trim(codeEditor.getValue()).length > 0) {
             document.getElementById("program").value=codeEditor.getValue();//document.getElementById('ctlFlash').getText()
             document.getElementById("operation").value = "Execute"
             document.getElementById("savetype").value = 4
             $("#executionActive").val("true");
             if(document.getElementById("argstextbox") != null)
                 document.getElementById("args").value = document.getElementById('argstextbox').value;

             document.getElementById("output").innerHTML = ""
             $("#observations").html("");
             document.getElementById("metricString").value = metricString.substring(0,metricString.length-1)
             $("#executeOnlinePgm").attr("disabled","disabled")
             var comp = 'contestComponent'
             document.getElementById("progress").innerHTML = "Waiting in the queue...";
            var formData = $('#executeEditorForm').serializeArray();
            formData.push({name: 'program', value: codeEditor.getValue()});
            formData.push({name: 'readOnlyLines', value: codeEditor.obtainReadOnlyLines()});
            $.ajax({
                url:contextPath+'/contestComponent/executeEditorProgram',
                //data:$('#executeEditorForm').serializeArray(),
                data:formData,
                type:'POST',
                success: function(data) {
                  //alert("Program executed")
                  //alert("Process Id:"+data);
                  //var obj = eval('(' + data + ')')
                  var obj = eval(data)
                  pid = obj.processId;
                  if(callBack && $.isFunction(callBack)){
                      callBack();
                  }

                  if(obj.compResult != "" && pid == null) {
                        $("#observations").show();
                        $("#observations").html(obj.compResult);
                        $("#observations").attr("class","alert alert-danger");
                        var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                        $("#observations").prepend(closeString)                        
                        document.getElementById("progress").innerHTML = "Compilation Errors";                      
                        if(document.getElementById("showAlertStatus") != null){
                            $("#observations").attr("class","alert alert-danger");
                            $('.bottomPane').hide();                             
                        }
                        $("#executeOnlinePgm").removeAttr("disabled");
                        $("#previousInputsdiv").hide();
                        return;
                  }                  
                  document.getElementById("progress").innerHTML = "Waiting in the queue...";
                  if(obj.isInQueue) {
                      if(obj.run) {
                          //setTimeout("waitToExecute()",1000)
                        receive('contestComponent');
                        document.getElementById("input").focus();
                      }
                      else {
                        waitToExecute('contestComponent');
                      }
                  }else {
                      document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
                      $("#executeOnlinePgm").removeAttr("disabled")
                      $("#previousInputsdiv").hide();
                  }
                  //alert("received called")
                },
                error: function(data,ioArgs) {
                    //alert("error"+data+":"+ioArgs)
                    alert("Program Terminated due to infinite idle state.")
                    $("#previousInputsdiv").hide();
                }
            });
        }
        else {
            document.getElementById("progress").innerHTML = "No Code Present...";
        }

      }
 
function executeSubButtonClick() {
    $('.bottomPane').show();
    executeSub();
    gotoExecutePane();
}

function executeSystemTestcaseForSubmission(pUrl) { 
    document.getElementById("savetype").value = 6
    requestObj = {
        url: pUrl,
        type:'POST',
        error: errorCall,
        timeout: ptimeout,
        data: {"program":$("#program").text(),"selectedLangId":document.getElementById("selectedLangId").value,"dummy":new Date().getTime(),"execprobid":document.getElementById("execprobid").value,
            "id":document.getElementById("execcompid").value,"passExecution":document.getElementById("passExecution").value,"asuaId":document.getElementById('userAttemptId').value,"savetype":document.getElementById("savetype").value},
        success: function(data, textStatus) {
                $("#observations").hide();
                data = checkCommonIssues(data);
                document.getElementById("systemTestcase").innerHTML = data;
                hideWait();
                $('#systemTestcaseDialog').modal('show');                    
        }
    };
    showWait();
    $.ajax(requestObj);
}

function executeSub(callBack) {    
    if ($("#program").text().length > 0) {         
        document.getElementById("operation").value = "Execute"
        document.getElementById("savetype").value = 4
        if (document.getElementById("argstextbox") != null)
            document.getElementById("args").value = document.getElementById('argstextbox').value;

        document.getElementById("output").innerHTML = ""
        $("#observations").html("");        
        $("#executeOnlinePgm").attr("disabled", "disabled")
        var comp = 'contestComponent'
        document.getElementById("progress").innerHTML = "Waiting in the queue...";
        var formData = $('#executeSubEditorProgram').serializeArray();
        formData.push({name: 'program', value: $("#program").text()});
        $.ajax({
            url: contextPath + '/contestComponent/executeSubEditorProgram',
            //data:$('#executeEditorForm').serializeArray(),
            data: formData,
            type: 'POST',
            success: function(data) {
                //alert("Program executed")
                //alert("Process Id:"+data);
                //var obj = eval('(' + data + ')')
                var obj = eval(data)
                pid = obj.processId;
                if (callBack && $.isFunction(callBack)) {
                    callBack();
                }

                if (obj.compResult != "" && pid == null) {
                    $("#observations").show();
                    $("#observations").html(obj.compResult);
                    document.getElementById("progress").innerHTML = "Compilation Errors";
                    $("#executeOnlinePgm").removeAttr("disabled");
                    return;
                }
                document.getElementById("progress").innerHTML = "Waiting in the queue...";
                if (obj.isInQueue) {
                    if (obj.run) {
                        //setTimeout("waitToExecute()",1000)
                        receiveForSub('contestComponent');
                        document.getElementById("input").focus();
                    }
                    else {
                        waitToExecuteSub('contestComponent');
                    }
                } else {
                    document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
                    $("#executeOnlinePgm").removeAttr("disabled")
                }
                //alert("received called")
            },
            error: function(data, ioArgs) {
                //alert("error"+data+":"+ioArgs)
                alert("Program Terminated due to infinite idle state.")
            }
        });
    }
    else {
        document.getElementById("progress").innerHTML = "No Code Present...";
    }

}

function executeProjectSubButtonClick() {
    $('.bottomPane').show();
    executeSubProject();
    gotoExecutePane();
}

function executeSubProject() {
    document.getElementById("output").innerHTML = ""
    $("#observations").html("");
    $("#executeOnlinePgm").attr("disabled","disabled")
    document.getElementById("progress").innerHTML = "Waiting in the queue...";
    $.ajax({
        url: contextPath+'/projectComponent/executeSubmissionProjectWorkspace',
        data: {"selectedLang":document.getElementById('selectedLangId').value,"subId":document.getElementById("subId").value,
            "asuaId":document.getElementById("asuaId").value,"probId":document.getElementById("probId").value,
            "userId":document.getElementById("userId").value,"compId":document.getElementById("compId").value,"dummy":new Date().getTime()},
        success: function(data,ioArgs) {
          //alert("Program executed")
          //alert("Process Id:"+data);
          //var obj = eval('(' + data + ')')                  
          var obj = eval(data)
          pid = obj.processId;                  

          if(obj.compResult != "" && pid == null) {
              $("#observations").html(obj.compResult);
              document.getElementById("progress").innerHTML = "Compilation Errors";
              $("#executeOnlinePgm").removeAttr("disabled");
              return;
          }
          document.getElementById("progress").innerHTML = "Waiting in the queue...";
          if(obj.isInQueue) {
              if(obj.run) {
                receiveForSub('projectComponent');
                document.getElementById("input").focus();
              }
              else {
                waitToExecuteSub('projectComponent');
              }
          }else {
              document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
              $("#executeOnlinePgm").removeAttr("disabled")
          }
        },
        error: function(data,ioArgs) {
            alert("error"+data+":"+ioArgs)
        }
    });

}


function projectSubmissionExecuteSystemTestcase(pUrl) {
    var selectedLang = document.getElementById("selectedLangName").value;
    if(selectedLang.toLowerCase() === "selenium"){
        return
    }else{
        console.log("In Other Block!!");
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"selectedLangId":document.getElementById("selectedLangId").value,"subId":document.getElementById("subId").value,
                "asuaId":document.getElementById("asuaId").value,"probId":document.getElementById("probId").value,
                "userId":document.getElementById("userId").value,"compId":document.getElementById("compId").value,"dummy":new Date().getTime()},
            success: function(data, textStatus) {
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $('#systemTestcaseDialog').modal('show');                        
            }
        };
        showWait();
        $.ajax(requestObj);
    }
}

function wgpExecute(callBack) {
        if(trim(codeEditor.getValue()).length > 0) {
             document.getElementById("program").value=codeEditor.getValue();//document.getElementById('ctlFlash').getText()
             document.getElementById("operation").value = "Execute"
             if(document.getElementById("argstextbox") != null)
                 document.getElementById("args").value = document.getElementById('argstextbox').value;

             document.getElementById("output").innerHTML = ""
             $("#observations").html("");
             $("#executeOnlinePgm").attr("disabled","disabled")
             var comp = 'contestComponent'
             document.getElementById("progress").innerHTML = "Waiting in the queue...";
            var formData = $('#executeEditorForm').serializeArray();
            formData.push({name: 'program', value: codeEditor.getValue()});
            $.ajax({
                url:contextPath+'/problem/executeWGPSolution',
                data:formData,
                type:'POST',
                success: function(data) {
                  var obj = eval(data)
                  pid = obj.processId;
                  if(callBack && $.isFunction(callBack)){
                      callBack();
                  }

                  if(obj.compResult != "" && pid == null) {
                      $("#observations").html(obj.compResult);
                      document.getElementById("progress").innerHTML = "Compilation Errors";
                      $("#executeOnlinePgm").removeAttr("disabled");
                      return;
                  }
                  document.getElementById("progress").innerHTML = "Waiting in the queue...";
                  if(obj.isInQueue) {
                      if(obj.run) {
                        receive('problem');
                        document.getElementById("input").focus();
                      }
                      else {
                        waitToExecute('contestComponent');
                      }
                  }else {
                      document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
                      $("#executeOnlinePgm").removeAttr("disabled")
                  }
                  //alert("received called")
                },
                error: function(data,ioArgs) {
                    //alert("error"+data+":"+ioArgs)
                    alert("Program Terminated due to infinite idle state.")
                }
            });
        }
        else {
            document.getElementById("progress").innerHTML = "No Code Present...";
        }

      }


function coveredExecution(){
        $('#verificationDialog').modal('show');
        document.getElementById("output2").innerHTML = ""
        $("#observations").html("");
//        $("#simulateVerilogPgm").attr("disabled","disabled")
        document.getElementById("progress").innerHTML = "Waiting in the queue...";
        $.ajax({
            url: contextPath+'/projectComponent/executeProjectWorkspace',
            data: {"selectedLang":document.getElementById('selectedLang').value,"covered":true,"args":document.getElementById('argstextbox').value,"dummy":new Date().getTime()},
            before: function() {
            showWait();
            },
            success: function(data) {
                hideWait();
//                $("#output2").css("background-color","black");
                $('#output2').html(data);
//                 $("#simulateVerilogPgm").removeAttr("disabled")
            },
            error: function(data) {
                hideWait();
//                $("#simulateVerilogPgm").removeAttr("disabled")
                alert("error"+data)
            }
        });
}

function showProjectExecDialog(executeAppLink) {
    var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
    if(selectedLang == "PHP" || selectedLang == "ASP" || selectedLang == "JEE" || selectedLang == "HTML" || selectedLang == "NodeJS" || selectedLang == "Angular" || selectedLang.toLowerCase() == "mean"  || selectedLang.toLowerCase() == "react" || selectedLang == "Grails" || selectedLang == "ReactSpringBoot" || selectedLang == "AngularSpringBoot") {
        executeWebApplication(executeAppLink,selectedLang);
    }
    else if(selectedLang == "SpringBootMaven" || selectedLang.toLowerCase() == "express") {
        executeWebApplication(executeAppLink,selectedLang);
    }
    else if(selectedLang == "Verilog" || selectedLang == "Modelsim"){
        amphiflip('EditorFlip');
        //$('#verilogDialog').modal('show');
    }else if(selectedLang.toLowerCase() === "selenium"){
        executeSeleniumProject();
    }else {
//        document.getElementById('executeDialogDiv').scrollIntoView();
        amphiflip('EditorFlip');
        $("#executeDialogDiv").show();
        executeProject();
        //$('#executeDijitDialog').modal('show');
}
}
function executeSeleniumProject() {
    showWait();
    var selectedLang = window.frames[0].document.getElementById("selectedLangName").value;
    $.ajax({
        url: contextPath+'/projectComponent/executeSeleniumProject',
        data: {"selectedLang":selectedLang},
        success: function(data) {
            document.getElementById('seleniumOutputDiv').innerHTML = data;
            hideWait();
            $('#showSeleniumOutputDialog').modal('show');
        },
        error: function() {
            alert("Unable to execute the application");
            errorCall()
        }
    });
}

function showQAExecDialog(url,compType) {
        amphiflip('EditorFlip');
        $("#executeDialogDiv").show();
        executeQAWorkspace(url,compType);
}

function executeVerilog(){
            showWait();
            document.getElementById("output1").innerHTML = ""
            $("#observations").html("");
            $("#simulateVerilogPgm").attr("disabled","disabled")
            //document.getElementById("progress").innerHTML = "Waiting in the queue...";
            $.ajax({
                url: contextPath+'/projectComponent/executeProjectWorkspace',
                data: {"selectedLang":document.getElementById('selectedLang').value,"covered":false,"dummy":new Date().getTime()},
                success: function(data) {
                    hideWait();
//                    $("#output1").css("background-color","black");
                    $('#output1').html(data);
                     $("#simulateVerilogPgm").removeAttr("disabled")
                },
                error: function(data) {
                    hideWait();
                    $("#simulateVerilogPgm").removeAttr("disabled")
                    alert("error"+data)
                }
            });
    }

function executeQAWorkspace(url,compType){//'qualityAnalyser'
     document.getElementById("output").innerHTML = ""
     $("#observations").html("");
     $("#executeOnlinePgm").attr("disabled","disabled")
     document.getElementById("progress").innerHTML = "Waiting in the queue...";
    $.ajax({
        url: url,
        data: {"selectedLang":document.getElementById('selectedLang').value,"selectedDBLangId":document.getElementById('selectedDBLang').value,"args":document.getElementById('argstextbox').value,"dummy":new Date().getTime()},
        success: function(data,ioArgs) {
          var obj = eval(data)
          pid = obj.processId;

          if(obj.compResult != "" && pid == null) {
              $("#observations").html(obj.compResult);
              document.getElementById("progress").innerHTML = "Compilation Errors";
              $("#executeOnlinePgm").removeAttr("disabled");
              return;
          }
          document.getElementById("progress").innerHTML = "Waiting in the queue...";
          if(obj.isInQueue) {
              if(obj.run) {
                receive(compType);
                document.getElementById("input").focus();
              }
              else {
                waitToExecute(compType);
              }
          }else {
              document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
              $("#executeOnlinePgm").removeAttr("disabled")
          }
        },
        error: function(data,ioArgs) {
            alert("error"+data+":"+ioArgs)
        }
    });
}

function executeProject() {
        //if(trim(codeEditor.getValue()).length > 0) {
             document.getElementById("output").innerHTML = ""
             $("#observations").html("");
             $("#executeOnlinePgm").attr("disabled","disabled")
             $("#executionActive").val("true");
             document.getElementById("progress").innerHTML = "Waiting in the queue...";
            $.ajax({
                url: contextPath+'/projectComponent/executeProjectWorkspace',
                data: {"selectedLang":document.getElementById('selectedLang').value,"args":document.getElementById('argstextbox').value,"dummy":new Date().getTime()},
                success: function(data,ioArgs) {
                  //alert("Program executed")
                  //alert("Process Id:"+data);
                  //var obj = eval('(' + data + ')')
                  var obj = eval(data)
                  pid = obj.processId;

                  if(obj.compResult != "" && pid == null) {
                        $("#observations").html(obj.compResult);
                        $("#observations").attr("class","alert alert-danger");
                        var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                        $("#observations").prepend(closeString)
                        document.getElementById("progress").innerHTML = "Compilation Errors";
                        $("#executeOnlinePgm").removeAttr("disabled");
                        return;
                  }
                  document.getElementById("progress").innerHTML = "Waiting in the queue...";
                  if(obj.isInQueue) {
                      if(obj.run) {
                          //setTimeout("waitToExecute()",1000)

                        receive('projectComponent');
                        document.getElementById("input").focus();
                      }
                      else {
                        waitToExecute('projectComponent');
                      }
                  }else {
                      document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
                      $("#executeOnlinePgm").removeAttr("disabled")
                  }
                  //alert("received called")
                },
                error: function(data,ioArgs) {
                    alert("error"+data+":"+ioArgs)
                }
            });

      }

function executeSelenium() {
    document.getElementById("output").innerHTML = "";
    $("#observations").html("");
    $.ajax({
        url: contextPath+'/projectComponent/executeProjectWorkspace',
        data: {"selectedLang":document.getElementById('selectedLang').value,"args":"","dummy":new Date().getTime()},
        before : showWait(),
        success: function(data,ioArgs) {
            console.log(data);
            $("#seleniumOutputDiv").html(data);
            $("#showSeleniumOutputDialog").modal("show");
            hideWait();
        }
    });
}

function waitToExecute(comp) {

        $.ajax({
            url: contextPath+'/'+comp+'/isPgmRunning/'+pid+'?time='+new Date().getTime(),
            success: function(data,ioArgs) {
              //var obj = eval('(' + data + ')')
              var obj = eval(data)
              pid = obj.processId;
              if(obj.run) {
                  //setTimeout("waitToExecute()",1000)

                  receive(comp);
                  document.getElementById("input").focus();
              }

              else {
                setTimeout(function() {waitToExecute(comp);},2000);
              }
            },
            error: function(data,ioArgs) {
              //alert("error"+data+":"+ioArgs)
            }
          });
  }

function send(comp,value) {
    var input = $("#input").val()
    if(value != undefined)
        input = value;


        $.ajax({
          url: contextPath+'/'+comp+'/send/'+pid+'?input='+encodeURIComponent(input)+'&time='+new Date().getTime(),
          success: function(data,ioArgs) {
            $("#output").html($("#output").html() + data)
            document.getElementById("input").value = ""
          },
          error: function(data,ioArgs) {
            alert("error"+data+":"+ioArgs)
          }
        });
  }

  function waitToExecuteSub(comp) {

    $.ajax({
        url: contextPath + '/' + comp + '/isPgmRunning/' + pid + '?time=' + new Date().getTime(),
        success: function (data, ioArgs) {
            //var obj = eval('(' + data + ')')
            var obj = eval(data)
            pid = obj.processId;
            if (obj.run) {
                //setTimeout("waitToExecute()",1000)

                receiveForSub(comp);
                document.getElementById("input").focus();
            }

            else {
                setTimeout(function () {
                    waitToExecuteSub(comp);
                }, 2000);
            }
        },
        error: function (data, ioArgs) {
            //alert("error"+data+":"+ioArgs)
        }
    });
}

  function sendForSub(comp, value) {
    var input = $("#input").val()
    if (value != undefined)
        input = value;


    $.ajax({
        url: contextPath + '/' + comp + '/sendForSub/' + pid + '?input=' + encodeURIComponent(input) + '&time=' + new Date().getTime(),
        success: function (data, ioArgs) {
            $("#output").html($("#output").html() + data)
            document.getElementById("input").value = ""
        },
        error: function (data, ioArgs) {
            alert("error" + data + ":" + ioArgs)
        }
    });
}

function receive(comp) {
        $("#input").removeAttr("disabled")
        document.getElementById("progress").innerHTML = "Program running";
        $("#onlinePgmSend").attr("disabled","")
        $.ajax({
          url: contextPath+'/'+comp+'/receive/'+pid+'?time='+new Date().getTime(),
          success: function(data,ioArgs) {

            //var obj = eval('(' + data + ')')
            var obj = eval(data)

            //alert("response:"+obj.outputTxt+":ter"+obj.terminated);
            $("#output").html($("#output").html() + obj.outputTxt)
            if(!($('#executionActive').length && $("#executionActive").val() == "false") && !obj.terminated)
                receive(comp);
            else {
                document.getElementById("progress").innerHTML = "Program terminated"
                $("#onlinePgmSend").attr("disabled","disabled")
                $("#executeOnlinePgm").removeAttr("disabled")
                $("#input").attr("disabled","disabled")
                $("#previousInputsdiv").hide();
                $('.stop-execution-btn').hide();
                $("#executionActive").val("false");
            }

          },
          error: function(data,ioArgs) {
            //alert("error"+data+":"+ioArgs)
          }
        });
  }
  
    function stopRecieve(){
        $("#executionActive").val("false");
        document.getElementById("progress").innerHTML = "Program terminated"
        $("#onlinePgmSend").attr("disabled","disabled")
        $("#executeOnlinePgm").removeAttr("disabled")
        $("#input").attr("disabled","disabled")
        $("#previousInputsdiv").hide();
        $('.stop-execution-btn').hide();
    }

  function receiveForSub(comp) {
    $("#input").removeAttr("disabled")
    document.getElementById("progress").innerHTML = "Program running";
    $("#onlinePgmSend").attr("disabled", "")
    $.ajax({
        url: contextPath + '/' + comp + '/receiveForSub/' + pid + '?time=' + new Date().getTime(),
        success: function (data, ioArgs) {

            //var obj = eval('(' + data + ')')
            var obj = eval(data)

            //alert("response:"+obj.outputTxt+":ter"+obj.terminated);
            $("#output").html($("#output").html() + obj.outputTxt)
            if (!obj.terminated)
                receiveForSub(comp);
            else {
                document.getElementById("progress").innerHTML = "Program terminated"
                $("#onlinePgmSend").attr("disabled", "disabled")
                $("#executeOnlinePgm").removeAttr("disabled")
                $("#input").attr("disabled", "disabled")
            }
        },
        error: function (data, ioArgs) {
            //alert("error"+data+":"+ioArgs)
        }
    });
}

function loadPreviousInputs(){
     var url = $("#previousInputsUrl").val();
    $.ajax({
        url:url,
        success:function(data, textStatus){
          $("#previousInputs").html(data);
          if(data.trim().length>0){
                 $("#previousInputsdiv").show();
          }
        },
        error:errorCall,
        data: {"dummy":new Date().getTime()},
        timeout: ptimeout
    });
}

function executeScodhvestEditor() {

        if(trim(codeEditor.getValue()).length > 0) {
             document.getElementById("program").value=codeEditor.getValue();//document.getElementById('ctlFlash').getText()
             document.getElementById("operation").value = "Execute"
             document.getElementById("savetype").value = 4
             document.getElementById("output").innerHTML = ""
             $("#observations").html("");
             document.getElementById("metricString").value = metricString.substring(0,metricString.length-1)
             $("#executeOnlinePgm").attr("disabled","disabled")
             var comp = 'scodhvestComponent'
             document.getElementById("progress").innerHTML = "Waiting in the queue...";
             var formData = $('#executeEditorForm').serializeArray();
             formData.push({name: 'program', value: codeEditor.getValue()});
            $.ajax({
                url:contextPath+'/scodhvestComponent/executeEditorProgram',
                //data:$('#executeEditorForm').serializeArray(),
                data:formData,
                type:'POST',
                success: function(data) {
                  //alert("Program executed")
                  //alert("Process Id:"+data);
                  //var obj = eval('(' + data + ')')
                  var obj = eval(data)
                  pid = obj.processId;

                  if(obj.compResult != "" && pid == null) {
                      $("#observations").html(obj.compResult);
                      document.getElementById("progress").innerHTML = "Compilation Errors";
                      $("#executeOnlinePgm").removeAttr("disabled");
                      return;
                  }
                  document.getElementById("progress").innerHTML = "Waiting in the queue...";
                  if(obj.isInQueue) {
                      if(obj.run) {
                          //setTimeout("waitToExecute()",1000)
                        receive('scodhvestComponent');
                        document.getElementById("input").focus();
                      }
                      else {
                        waitToExecute('scodhvestComponent');
                      }
                  }else {
                      document.getElementById("progress").innerHTML = "Oops!!!  Too many Users online ... Please try later"
                      $("#executeOnlinePgm").removeAttr("disabled")
                  }
                  //alert("received called")
                },
                error: function(data,ioArgs) {
                    //alert("error"+data+":"+ioArgs)
                    alert("Program Terminated due to infinite idle state.")
                }
            });
        }
        else {
            document.getElementById("progress").innerHTML = "No Code Present...";
        }

      }


/* Program Executor - End */

/* Problem Cart - Start */

function addSinglePoolToContest() {

    var contestId = document.getElementById('contestId').value
    var totalCount = document.getElementById('totalCount').value
    var selectedPool = document.getElementById('selectedPool').value
    var selectedComplexity = document.getElementById('selectedComplexity').value
    var problemcount = document.getElementById('problemcount').value

    requestObj = {
        url:contextPath+"/contestComponent/addSinglePoolToContest",
        type:'POST',
        data : {
            "id":contestId,
            "totalCount":totalCount,
            "selectedPool":selectedPool,
            "selectedComplexity":selectedComplexity,
            "problemcount":problemcount
        },
        success:function(data, textStatus){
            if(data != "Success") {
                alert(data);
            } else {
                showProblemCart();
            }
        },
        error:errorCall,
        timeout: ptimeout
    };

    $.ajax(requestObj);

}

function showProblemCart() {
    requestObj = {
        url:document.getElementById('problemcartlink').value,
        type:'POST',
        success:function(data, textStatus){
            hideWait();
            data = checkCommonIssues(data);
                document.getElementById('problemCart').innerHTML = data;
        },
        error:errorCall,
        data: {"id":document.getElementById("id").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
/* Problem Cart - End */


/* Contest Create - Title Panes - Start */
function processLanguageConfigNew(pUrl,pOp,dellangid) { 
    showWait();
    console.log(pUrl+"===="+pOp+"====="+dellangid);
    document.getElementById("op").value = pOp;
    document.getElementById("dellangid").value = dellangid;
    requestObj = {
        url:pUrl,
        type:'POST',
        data:{
            dellangid:dellangid,
            op:pOp,
            memorySpace:$("#memorySpace").val(),
            runningTime:$("#runningTime").val(),
            searchTeamId:$("#searchTeamId").val(),
            languageid:$("#languageid").val(),
            langaugeVisibility : $("#langaugeVisibility").is(":checked")
        },
        success:function(data, textStatus) {
            globalComplete(data, textStatus);
            
//            document.getElementById("languageConfigDiv").innerHTML = data;
            $('#languageConfigDivNew').html(data);
        },
        error:errorCall,        
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function processLanguageConfig(pUrl,pOp,dellangid) {
    showWait();
    document.getElementById("op").value = pOp;
    document.getElementById("dellangid").value = dellangid;
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data, textStatus);
//            document.getElementById("languageConfigDiv").innerHTML = data;
            $('#languageConfigDiv').html(data);
        },
        error:errorCall,
        data:$('#createComponent').serializeArray(),
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
/* Contest Create - Title Panes - End */

/* Problem Crud Start */

function testcaseCrud(pUrl, op, testnum) {

    flag = 0;
    if(op==='delete') {
        if(confirm("Please make sure, no submission for this problem before delete any testcase. Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("showTestcases").innerHTML = data;
                reverseDisplay('outputDiv','output');
                if(op !='delete') {
                    $('html, body').animate({
                        scrollTop: $("#testcaseEdit").offset().top
                    }, 1000);
                }
            },
            error:errorCall,
            data: {"testcasenumber":testnum,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}

function testbenchCrud(pUrl, op, testnum) {

    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("showTestbench").innerHTML = data;
                reverseDisplay('outputDiv1','tboutput');
                reverseDisplay('outputDiv2','testbench');
            },
            error:errorCall,
            data: {"testcasenumber":testnum,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}

function coverageCrud(pUrl, op, testnum) {

    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("showCoverage").innerHTML = data;
            },
            error:errorCall,
            data: {"testcasenumber":testnum,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}

function addRemoveTestcase(pUrl, op, testnum,type) {

    var input = document.getElementById('input').value
    var out = document.getElementById('output')
    var output
    if(out!=null)
        output = document.getElementById('output').value
    document.getElementById('input').value=""
    if(out!=null)
        document.getElementById('output').value=""
    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag=1

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                if(op==='delete' || op==='save') {
                    document.getElementById("showTestcases").innerHTML = data;
                    $('#updateId').val('');
                }
                else {
                    $('#input').val(data.input);
                    $('#output').val(data.output);
                    $('#updateId').val(data.seqId);
                }
                },
            error:errorCall,
            data: {"testcasenumber":testnum,"op":op,"dummy":new Date().getTime(),"input":input,"output":output,"updateId":$('#updateId').val()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }

}


function saveVerilogTestcase(pUrl) {
    showWait();
    applyOptionalCustomTags('outputDiv1','tboutput');
    applyOptionalCustomTags('outputDiv2','testbench');
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showTestbench").innerHTML = data;
            reverseDisplay('outputDiv1','tboutput');
            reverseDisplay('outputDiv2','testbench');
        },
        error:errorCall,
        data: {"testcasenumber":document.getElementById('tbnumber').value,"tbname":document.getElementById("tbname").value,
            "tboutput":document.getElementById("tboutput").value,
            "tbpurpose":document.getElementById('tbPurpose.id').value,
            "testbench":document.getElementById('testbench').value,
            "tbvariables":document.getElementById('tbvariables').value,
            "evaluationType":document.getElementById('evaluationType').value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


function saveCoverage(pUrl){
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showCoverage").innerHTML = data;
        },
        error:errorCall,
        data: {"testcasenumber":document.getElementById('covnumber').value,"cname":document.getElementById("cname").value,
            "cPurpose":document.getElementById('cPurpose.id').value,
            "lineCoverage":document.getElementById('lineCoverage').value,
            "toggleCoverage":document.getElementById('toggleCoverage').value,
            "logicCoverage":document.getElementById('logicCoverage').value,
            "machineCoverage":document.getElementById('machineCoverage').value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


function saveTestcase(pUrl) {
    showWait();
    applyOptionalCustomTags('outputDiv','output');
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showTestcases").innerHTML = data;
            reverseDisplay('outputDiv','output');
        },
        error:errorCall,
        data: {"testcasenumber":document.getElementById('testcasenumber').value,"tcname":document.getElementById("tcname").value,
            "tcinput":document.getElementById('input').value,"tcoutput":document.getElementById("output").value,"tcconsole" : $('#tcconsole').val(),
            "tcpurpose":document.getElementById('testcasePurpose.id').value,"cmdLineArgs":document.getElementById("cmdLineArgs").value,
            "hint":document.getElementById('hint').value,"visibleInAttempt":document.getElementById('visibleInAttempt').checked,
            "n":document.getElementById('n').value,"op":"save","dummy":new Date().getTime(),"tcEvalTypeId":$("#tcEvalTypeId").val()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelTestcase(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showTestcases").innerHTML = data;
            reverseDisplay('outputDiv','output');
        },
        error:errorCall,
        data: {"op":"cancel","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

/* Problem Crud End */

/* Problem Template Code Start */
function templateCodeCrud(pUrl, op, langid) {
    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                $("#templateCodeDiv").html(data);
            },
            error:errorCall,
            data: {"langid":langid,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}

function problemSolutionCrud(pUrl, op, langid) {
    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("showProblemSolution").innerHTML = data;
            },
            error:errorCall,
            data: {"langid":langid,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}


function saveTemplateCode(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showTemplateCode").innerHTML = data;
        },
        error:errorCall,
        data: {"selectedlanguage":document.getElementById('selectedlanguage').value,"templatecode":document.getElementById("templatecode").value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelTemplateCode(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("showTemplateCode").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
/* Problem Template Code End */

/* Problem Keyword Start */
function tempKeywordCrud(pUrl, op, probKeywordNumber) {
    probKeywordCrud(pUrl, op, document.getElementById("probKeywordNumber").value,document.getElementById('languageid').value);
}
function probKeywordCrud(pUrl, op, probKeywordNumber,languageid) {

    flag = 0;
    if(op=='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag == 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
            },
            error:errorCall,
            data: {"probKeywordNumber":probKeywordNumber,"languageid":languageid,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}
function saveProbKeyword(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"probKeywordNumber":document.getElementById('probKeywordNumber').value,"mincount":document.getElementById("mincount").value,
            "maxcount":document.getElementById('maxcount').value,"keywordid":document.getElementById("keywordid").value,
            "languageid":document.getElementById("languageid").value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelProbKeyword(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","languageid":document.getElementById('languageid').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

/* Problem Keyword End */




/* Problem Function Start */
function tempFunctionCrud(pUrl, op, probFunctionNumber) {
    probKeywordCrud(pUrl, op, probFunctionNumber);
}
function probFunctionCrud(pUrl, op, probFunctionNumber) {
    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
                if(op !='delete') {
                    $('html, body').animate({
                        scrollTop: $("#functionTemplateEdit").offset().top
                    }, 1000);
                }
            },
            error:errorCall,
            data: {"probFunctionNumber":probFunctionNumber,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}
function saveProbFunction(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"probFunctionNumber":document.getElementById('probFunctionNumber').value,"scodMethodName":document.getElementById("scodMethodName").value,
            "scodMethodReturntype":document.getElementById('scodMethodReturntype').value,
            "scodMethodParams":document.getElementById("scodMethodParams").value,
            "probFunctionTemplate":document.getElementById("functionTemplate.id").value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelProbFunction(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function probTestcaseFunctionCrud(pUrl, op, probFunctionNumber,probTestcaseFunctionNumber) {
    flag = 0;
    if(op==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
                if(op !='delete'){
                    $('html, body').animate({
                        scrollTop: $("#functionTestcaseEdit").offset().top
                    }, 1000);
                }
            },
            error:errorCall,
            data: {"probFunctionNumber":probFunctionNumber,"ftestcasenumber":probTestcaseFunctionNumber,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}
function saveFunctionTestcase(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"ftestcasenumber":document.getElementById('ftestcasenumber').value,"ftcname":document.getElementById("ftcname").value,
            "ftcinput":document.getElementById('finput').value,"ftcoutput":document.getElementById("foutput").value,
            "ftcpurpose":document.getElementById('ftestcasePurpose.id').value,
             "probFunctionNumber":document.getElementById('probFunctionInstance.number').value, "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelFunctionTestcase(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
/* Problem Function End */



/* Problem OO Start */

function getRelevantClassTemplate(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"classlanguage":document.getElementById('classlanguage').value,
            "op":"select","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}


function probOoClassCrud(pUrl,op,probOoClassNumber) {

    flag = 0;
    if(op=='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag == 1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
            },
            error:errorCall,
            data: {"probOoClassNumber":probOoClassNumber,"classlanguage":document.getElementById('classlanguage').value,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
        showWait();
    }

}
function saveProbOoClass(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"probOoClassNumber":document.getElementById('probOoClassNumber').value,"classname":document.getElementById("classname").value,
            "baseClasses":document.getElementById('baseClasses').value,"classlanguage":document.getElementById('classlanguage').value,
            "baseInterfaces":document.getElementById("baseInterfaces").value,
            "keywords":loopSelected(document.getElementById('keywordSet')),
            "accessModifier":document.getElementById('accessModifier.id').value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
function cancelProbOoClass(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

/* Problem OO Member Start */
function probOoMemberCrud(pUrl,op,probOoMemberNumber) {

    flag = 0;
    if(op=='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag == 1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
            },
            error:errorCall,
            data: {"probOoMemberNumber":probOoMemberNumber,"probOoClassNumberForMem":document.getElementById('probOoClassNumberForMem').value,
                "op":op,"classlanguage":document.getElementById('classlanguage').value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
        showWait();
    }

}
function saveProbOoMember(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"probOoMemberNumber":document.getElementById('probOoMemberNumber').value,"membername":document.getElementById("membername").value,
            "datatype":document.getElementById('datatype').value,"probOoClassNumberForMem":document.getElementById('probOoClassNumberForMem').value,
            "keywords":loopSelected(document.getElementById('keywordSetForMem')),
            "accessModifierForMem":document.getElementById('accessModifierForMem.id').value,
            "classlanguage":document.getElementById('classlanguage').value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
function cancelProbOoMember(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel",
            "probOoClassNumberForMem":document.getElementById('probOoClassNumberForMem').value,
            "classlanguage":document.getElementById('classlanguage').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

/* Problem OO Function Start */
function probOoFunctionCrud(pUrl,op,probOoFunctionNumber) {

    flag = 0;
    if(op=='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag == 1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
            },
            error:errorCall,
            data: {"probOoFunctionNumber":probOoFunctionNumber,"probOoClassNumberForFunc":document.getElementById('probOoClassNumberForFunc').value,
                "op":op,"classlanguage":document.getElementById('classlanguage').value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
        showWait();
    }

}
function saveProbOoFunction(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"probOoFunctionNumber":document.getElementById('probOoFunctionNumber').value,"methodname":document.getElementById("methodname").value,
            "returntype":document.getElementById('returntype').value,"probOoClassNumberForFunc":document.getElementById('probOoClassNumberForFunc').value,
            "methodParams":document.getElementById('methodParams').value,"classlanguage":document.getElementById('classlanguage').value,
            "functionTemplate":document.getElementById('functionTemplate.id').value,
            "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
function cancelProbOoFunction(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel",
            "probOoClassNumberForFunc":document.getElementById('probOoClassNumberForFunc').value,
            "classlanguage":document.getElementById('classlanguage').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function oOprobTestcaseFunctionCrud(pUrl, op, probFunctionNumber,probTestcaseFunctionNumber) {
    showWait();
    flag = 0;
    if(op=='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag == 1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("otherConstraints").innerHTML = data;
            },
            error:errorCall,
            data: {"classlanguage":document.getElementById('classlanguage').value,"ooprobFunctionNumber":probFunctionNumber,"ooftestcasenumber":probTestcaseFunctionNumber,"op":op,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}
function saveOoFunctionTestcase(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"ooftestcasenumber":document.getElementById('ooftestcasenumber').value,"ooftcname":document.getElementById("ooftcname").value,
            "ooftcinput":document.getElementById('oofinput').value,"ooftcoutput":document.getElementById("oofoutput").value,
            "ooftcpurpose":document.getElementById('ooftestcasePurpose.id').value,
             "ooprobFunctionNumber":document.getElementById('ooprobFunctionNumber').value,"classlanguage":document.getElementById('classlanguage').value,
             "op":"save","dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function cancelOoFunctionTestcase(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("otherConstraints").innerHTML = data;
        },
        error:errorCall,
        data: {"op":"cancel","classlanguage":document.getElementById('classlanguage').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

/* Problem OO End */


/* DBMS - Start */
function moveToDbmsEditor(id) {
    codeEditor.setValue(codeEditor.getValue()+"\n"+document.getElementById('q'+id).innerHTML);
}

function getDbmsCodeEditorForPractice(pUrl,spid,compid) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success: function(data) {
            if(data == "sessionInterrupt") {
                showWait();
                alert("It seems session interrupted somewhere...");
                if(contextPath == undefined || contextPath == '') {
                    window.location.replace("/");
                }
                else {
                    window.location.replace(contextPath);
                }
            }
            else {
                getDbmsCodeEditorReadyForPractice(data);
            }
        },
        error:errorCall,
        data:{"probid":spid,"compid":compid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function fetchCode(pUrl,partialSubId) {
    var spid = $('#sPId').val();
    var compid = $('#compId').val();
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success: function(data) {
            if(data == "sessionInterrupt") {
                showWait();
                alert("It seems session interrupted somewhere...");
                if(contextPath == undefined || contextPath == '') {
                    window.location.replace("/");
                }
                else {
                    window.location.replace(contextPath);
                }
            }
            else {
                $('.CodeMirror').remove();
                $('#program').val(data);
                initdbmsquery = document.getElementById("program").value;
                codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {
                    lineNumbers: true,
                    matchBrackets: true,
                    autofocus :true,
                    mode: document.getElementById('codemirrorlang').value,
                });
                hideWait();
            }
        },
        error:errorCall,
        data:{"probid":spid,"compid":compid,"dummy":new Date().getTime(),partialSubId:partialSubId},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}



function getDbmsCodeEditorReadyForPractice(data) {

    hideWait();
    
    data = checkCommonIssues(data);
        document.getElementById('programEditor').innerHTML =data;
        initdbmsquery = document.getElementById("program").value;

        codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {
            lineNumbers: true,
            matchBrackets: true,
            autofocus :true,
            mode: document.getElementById('codemirrorlang').value,
        });
        document.getElementById('programEditor').style.visibility = "visible";
        document.getElementById('programEditor').focus();
        keyList = document.getElementById('keywords').value.split(',');
        var intervaltime
        if(intervaltime > 0) {
            if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
            }
            getMetricsFromCodeObj = setInterval("getMetricsFromCode()",editortrackinterval);
            autoSaveIntervalObj = setInterval("executeDbmsScript('"+autosaveurl+"',2)",intervaltime);
        }
        updateTime();

}


function getDbmsCodeEditor(pUrl,spid,compid) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success: function(data) {
            if(data == "sessionInterrupt") {
                showWait();
                alert("It seems session interrupted somewhere...");
                if(contextPath == undefined || contextPath == '') {
                    window.location.replace("/");
                }
                else {
                    window.location.replace(contextPath);
                }
            }
            else {
                    getDbmsCodeEditorReady(data);
            }
        },
        error:errorCall,
        data:{"probid":spid,"compid":compid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);                    
}
function getDbmsCodeEditorNew(pUrl,spid,compid){
    
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success: function(data) {
            if(data == "sessionInterrupt") {
                showWait();
                alert("It seems session interrupted somewhere...");
                if(contextPath == undefined || contextPath == '') {
                    window.location.replace("/");
                }
                else {
                    window.location.replace(contextPath);
                }
            }
            else {
                    getDbmsCodeEditorReadyNew(data);
            }
        },
        error:errorCall,
        data:{"probid":spid,"compid":compid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);        
}

function getDbmsCodeEditorReady(data) {

    hideWait();
    
    var dbmsEditorCharLimit = $("#dbmsEditorCharLimit").val();
    if(dbmsEditorCharLimit == undefined) {
        dbmsEditorCharLimit = 2000;
    }
    else {
        dbmsEditorCharLimit = parseInt(dbmsEditorCharLimit);
    }
    
    data = checkCommonIssues(data);
    $('#sqlEditorDialog').on('shown.bs.modal',function(){
        document.getElementById('programEditor').innerHTML =data;
        initdbmsquery = document.getElementById("program").value;

        codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {
            lineNumbers: true,
            matchBrackets: true,
            autofocus :true,
            mode: document.getElementById('codemirrorlang').value,
            onChange : function(cm,change) {
                if(cm.getValue(cm).length >= dbmsEditorCharLimit) {
                    cm.setValue(cm.getOption("oldValue"));
                    cm.setOption("oldValue","");
                }
                return true;
            }
        });
        document.getElementById('programEditor').style.visibility = "visible";
        document.getElementById('programEditor').focus();
        document.getElementById('programEditor').scrollIntoView();
        keyList = document.getElementById('keywords').value.split(',');

        if(intervaltime > 0) {
            if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
            }
            getMetricsFromCodeObj = setInterval("getMetricsFromCode()",editortrackinterval);
            //console.log("intervaltime -> "+intervaltime);
            autoSaveIntervalObj = setInterval("executeDbmsScript('"+autosaveurl+"',2)",intervaltime);
        }
        updateTime();        
        if(document.getElementById("disableCopyPaste").value === "true" && document.getElementById("program") !==null ) {            
            var obj = codeEditor.getWrapperElement().firstChild;
            if(obj !== null) {
                obj.oncopy = function(event) { $('#rdialog').modal('show'); return false; }
                obj.onpaste = function(event) {$('#rdialog').modal('show'); return false; }
                obj.oncut = function(event) { codeEditor.undo();$('#rdialog').modal('show'); return false; }
                $('#sqlEditorDialog').bind('dragover drop', function(event){
                    codeEditor.undo();
                    $('#rdialog').modal('show');
                    return false;
                });            
        }
        }
        });
        $('#sqlEditorDialog').on('hidden.bs.modal',function(){
           if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
                autoSaveIntervalObj = ""
            }
       });
        $('#sqlEditorDialog').modal('show');

}

function getDbmsCodeEditorReadyNew(data) {
    hideWait();
    
    var dbmsEditorCharLimit = $("#dbmsEditorCharLimit").val();
    if(dbmsEditorCharLimit == undefined) {
        dbmsEditorCharLimit = 2000;
    }
    else {
        dbmsEditorCharLimit = parseInt(dbmsEditorCharLimit);
    }
    
    data = checkCommonIssues(data);
    $('#sqlEditorDialog').on('shown.bs.modal',function(){
        document.getElementById('programEditor').innerHTML =data;
        initdbmsquery = document.getElementById("sqlACEEditor").value;
        ace.require("ace/ext/language_tools");
        codeEditor = ace.edit("sqlACEEditor");    
        codeEditor.setOptions({
            enableBasicAutocompletion: true,
            fontSize: "20pt",
            minLines: 50,
            maxLines: Infinity
        });
        codeEditor.setTheme("ace/theme/textmate");    
        codeEditor.session.setMode("ace/mode/sql");
  
        document.getElementById('programEditor').style.visibility = "visible";
        document.getElementById('programEditor').focus();
        document.getElementById('programEditor').scrollIntoView();
        keyList = document.getElementById('keywords').value.split(',');
        if(intervaltime > 0) {
            if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
            }
            getMetricsFromCodeObj = setInterval("getMetricsFromCode()",editortrackinterval);
            //console.log("intervaltime -> "+intervaltime);
            autoSaveIntervalObj = setInterval("executeDbmsScriptNew('"+autosaveurl+"',2)",intervaltime);
        }
        updateTime();        
        if(document.getElementById("disableCopyPaste").value === "true" && document.getElementById("sqlACEEditor") !==null ) {            
//            var obj = codeEditor.getWrapperElement().firstChild;                
                codeEditor.onCopy = function(event) { $('#rdialog').modal('show'); return false; }
                codeEditor.onPaste = function(event) {$('#rdialog').modal('show'); return false; }
                codeEditor.onCut = function(event) { codeEditor.undo();$('#rdialog').modal('show'); return false; }
                $('#sqlEditorDialog').bind('dragover drop', function(event){
                    codeEditor.undo();
                    $('#rdialog').modal('show');
                    return false;
                });            
        }
        });
        $('#sqlEditorDialog').on('hidden.bs.modal',function(){
           if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
                autoSaveIntervalObj = ""
            }
       });
        $('#sqlEditorDialog').modal('show');

}
function showExecutedQueries() {
    pUrl = document.getElementById('executedQuerylink').value;
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            document.getElementById('showExecutedQueries').innerHTML = data;
        },
        error:errorCall,
        data:serializeForm('executeDbmsForm'),
        timeout: ptimeout
    };
    $.ajax(requestObj);

}
function executeDbmsScript(pUrl,savetype) {
    if(codeEditor.getSelection().length != 0) {
        document.getElementById('program').value = codeEditor.getSelection();
    } else {
        document.getElementById('program').value = codeEditor.getValue();
    }
    document.getElementById('savetype').value = savetype;
    document.getElementById('metricString').value=metricString.substring(0,metricString.length-1);
    var flag = 1;

    if(savetype === 2) {

        if(initdbmsquery === document.getElementById('program').value)
            flag = 0;
        //alert(initdbmsquery+","+document.getElementById('program').value+","+flag);

    }
    else
        showWait();
    if(flag ===1) {
        requestObj = {            
            url:pUrl,
            type:'POST',                        
            success:function(data){executeDbmsScriptReady(data,savetype)},
            complete:function(a,b){hideWait();},
            error:errorCall,
            //form: dojo.byId('executeDbmsForm'),
            //data:$('#executeDbmsForm').serializeArray(),
            data:serializeForm('executeDbmsForm'),
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }

}

function executeDbmsScriptNew(pUrl,savetype) {
    if(codeEditor.getSelectedText().length != 0) {
         $('#program').val(codeEditor.getSelectedText());
    } else {
        $('#program').val(codeEditor.getValue());
    }
    document.getElementById('savetype').value = savetype;
    document.getElementById('metricString').value=metricString.substring(0,metricString.length-1);
    var flag = 1;
    if(savetype === 2) {
        if(initdbmsquery === document.getElementById('program').value)
            flag = 0;
        //alert(initdbmsquery+","+document.getElementById('program').value+","+flag);

    }
    else
        showWait();
    if(flag ===1) {
        requestObj = {            
            url:pUrl,
            type:'POST',                        
            success:function(data){executeDbmsScriptReadyNew(data,savetype)},
            complete:function(a,b){hideWait();},
            error:errorCall,
            //form: dojo.byId('executeDbmsForm'),
            //data:$('#executeDbmsForm').serializeArray(),
            data:serializeForm('executeDbmsForm'),
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }

}
function executeDbmsScriptReady(data,savetype) {
    if(savetype == undefined){
        savetype = document.getElementById('savetype').value;
    }
    if(savetype != 2) {
        if(data.search('SQL ERROR:') !=-1 || data.search('Failed to execute:') !=-1 || data.search('java.sql.SQLException:') !=-1 ) {
            $("#observations").attr("class","alert alert-danger");            
            var str = "java.sql.SQLException:";
            str = data.replace(str, "");
            document.getElementById('observations').innerHTML = str;
        }
        else {
            $("#observations").attr("class","alert alert-success");
            document.getElementById('observations').innerHTML = data;
        }
        hideWait();
        if(savetype == 4) { // To update executed Queries Div
//            showExecutedQueries();
            appendExecutedQuery();
        }
    }
    else { //AutoSave - Query reset
        initdbmsquery = document.getElementById('program').value;
    }
}

function executeDbmsScriptReadyNew(data,savetype) {
    if(savetype == undefined){
        savetype = document.getElementById('savetype').value;
    }
    if(savetype != 2) {
        if(data.search('SQL ERROR:') !=-1 || data.search('Failed to execute:') !=-1 || data.search('java.sql.SQLException:') !=-1 ) {
            $("#observations").attr("class","alert alert-danger");            
            var str = "java.sql.SQLException:";
            str = data.replace(str, "");
            document.getElementById('observations').innerHTML = str;
        }
        else {
            $("#observations").attr("class","alert alert-success");
            document.getElementById('observations').innerHTML = data;
        }
        hideWait();
        if(savetype == 4) { // To update executed Queries Div
//            showExecutedQueries();
            appendExecutedQuery();
        }
    }
    else { //AutoSave - Query reset
        initdbmsquery = $('#program').val();
    }
}
function appendExecutedQuery(){
    var query = codeEditor.getValue();
    var key = "j"+new Date().getTime();
    if(query.trim() !== ""){
        var rowString = "<tr><td style='border: 1px solid black;'>";
          rowString += "<div id='q"+key+"'>"+query+"</div> &nbsp; - &nbsp;&nbsp;<a onclick='moveToDbmsEditor(\""+key+"\");' href='javascript:void(0)'>Move</a>";
        rowString+"</td></tr>";
        $("#showExecutedQueries tr:last").after(rowString);
    }
}

function loadDbmsProblemType(pUrl,action,number,pUrlOne) {
    collectCKeditorValues();
    if(action!==null)
        document.getElementById('op').value = action;
    if(number!== null)
        document.getElementById('subproblemnumber').value = number;
    flag = 0;
    if(action==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data,textStatus) {
                if(CKEDITOR.instances['description']){
                    CKEDITOR.instances['description'].destroy(true);
                }
                $("#subquestiondiv").html(data);
                loadsubProblemList(pUrlOne)
            },
            error:errorCall,
            data: serializeForm('subproblemform'),
            timeout: ptimeout
        };
        $.ajax(requestObj);

    }

}

function loadsubProblemList(pUrl) {
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            document.getElementById('currentsubproblems').innerHTML = data;},
        error:errorCall,
        data: {"id":document.getElementById('id').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function showAvailableQueriesProbCreation(pUrl) {
    //showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            document.getElementById('observations').innerHTML = data;
            document.getElementById('currentTestData').value = document.getElementById('testDataQuery').value;
            $('#queryExecutionDialog').modal('show');
        },
        data: serializeForm('subproblemform'),
        error:errorCall,
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function executeDbmsScriptProblemCreation(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            if(data.search('SQL ERROR:') !==-1)
                document.getElementById('observations').innerHTML = "<span class='redColorBigFont' style='line-height: 1.4;'>"+data+"</span>";
            else
                document.getElementById('observations').innerHTML = data;
            $('#queryExecutionDialog').modal('show');
        },
        data: serializeForm('subproblemform'),
        error:errorCall,
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function dbmsQueryTestcaseCrud(pUrl,opOne,testcasenumber) {

    flag = 0;
    if(opOne==='delete') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else
        flag = 1;

    if(testcasenumber === null) {
        testcasenumber = document.getElementById('testcasenumber').value;
    }
    if(flag === 1) {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data,textStatus) {
                globalComplete(data,textStatus);
                document.getElementById('divTestcaseList').innerHTML = data;
            },
            error:errorCall,
            data: {"name":document.getElementById('tcname').value,"query":document.getElementById('tcquery').value,
                "baseProblem.id":document.getElementById('baseProblem.id').value,"subproblemnumber":document.getElementById('subproblemnumber').value,
                "tcweightage":$('#tcweightage').val(),
                  "opOne":opOne,"testcasenumber":testcasenumber,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
}

function showSubProblemsReArrangeDialog(pUrl) {
      $('#rearrangeDialog').modal('show');
      $('#rearrangeDialog').on('shown.bs.modal',function(){
            amphiSortable(".rearrangeElements",function($item){
                  var ids=[];
                  $item.parent().children().each(function(){
                        ids.push($(this).attr("id"));
                  });
                  var data=ids.join();
                  $.ajax({
                        url:pUrl,
                        before:showWait,
                        success:function(data) {
                              hideWait();
                        },
                        data: {
                              "str":data,
                              "id":document.getElementById('id').value,
                              "dummy":new Date().getTime()
                        },
                        type:'post',
                        error:errorCall
                  });
            });
      });
      $('#rearrangeDialog').on('hide.bs.modal',function(){
            location.reload(false);
      });
}

/* DBMS End */


/* Function template Start */
function getCodeEditorFunctionTemplate(pUrl) {

    var idnum = null;
    if(document.getElementById('id')) {
        idnum = document.getElementById('id').value;
    }
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById('programEditor').innerHTML =data;
            codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {
                lineNumbers: true,
                matchBrackets: true,
                /*theme: 'eclipse',*/
                mode: document.getElementById('codemirrorlang').value
            });
        },
        error:errorCall,
        data:{"selectedLang":document.getElementById('language.id').value,"id":idnum,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function compileFunctionTemplateProgram(pUrl) {
    showWait();
    requestObj = {
        url: pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            if(data.indexOf('Compilation Successful',0) >= 0) {
                $("#observations").attr("class","alert alert-success");
            }
            else {
                $("#observations").attr("class","alert alert-danger");
            }
            document.getElementById("observations").innerHTML = data;

        },
        error: errorCall,
        data: {"program":codeEditor.getValue(),"language":document.getElementById("languagefn").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function transferTemplateCode() {
    document.getElementById('template').value = codeEditor.getValue();
    return true;
}

/* Function template End */

/* Testing Components Problem Creation - Start */
function getContestsForCourse(pUrl) {
    pUrl = contextPath+"/"+document.getElementById('cntr').value+"/"+pUrl
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            hideWait();
         //   clearSelectElement(selectedContest);
            document.getElementById("problemid").value="";
            if(document.getElementById("languageid") != undefined){
               document.getElementById("languageid").value="";
            }
            showAmphiSearchSelectBox();
            parseResponseForDojoXML(data, selectedContest, "contest");
            showAmphiSearchSelectBox();
        },
        error:errorCall,
        data: {"selectedCourse":document.getElementById("selectedCourse").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function getProblemsForContest(pUrl) {
    var controllerName = document.getElementById('cntr').value
    pUrl = contextPath+"/"+controllerName+"/"+pUrl
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            hideWait();
       //     clearSelectElement(problemid);
            showAmphiSearchSelectBox();
            var probele = document.getElementById('problemid')
            var langele = document.getElementById('languageid')
            parseResponseForDojoXML(data, probele, "problem");            
            if((controllerName =='contestComponent' || controllerName == 'projectComponent' )){
                parseResponseForDojoXML(data, langele, "language");
            }
            showAmphiSearchSelectBox();
        },
        error:errorCall,
        data: {"selectedContest":document.getElementById("selectedContest").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function getSubProblemsForProblem(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            hideWait();
            parseResponseForDojoXML(data, subproblemid, "problem");
        },
        error:errorCall,
        data: {"selectedProblem":document.getElementById("problemid").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
function getTestcasesForProblem(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            hideWait();
            parseResponseForDojoXML(data, testcaseid, "testcase");
        },
        error:errorCall,
        data: {"selectedProblem":document.getElementById("problemid").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


function createDeleteProblem(pUrl,pOp,probid) {
    showWait();
    document.getElementById('op').value=pOp;
    if(probid != undefined)
        document.getElementById('problemid').value = probid;
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("generatedProblem").innerHTML = data;
            amphiSortable(".rearrangeElements",function() {
                var code = '';
                var childNodes, line;
                childNodes = $('#answerDiv').children();
                for(i=0;i<childNodes.length;i++) {
                    if(childNodes[i].innerHTML) {
                        line = childNodes[i].innerHTML;
                        line = line.replace(/<br>/g,"\n")
                        code = code + line;
                    }
                }
                document.getElementById('answer').value = code;

            }
            );
            amphiSortable(".rearrangeHorizontalElements",function() {
                var code = '';
                var childNodes, line;
                childNodes = $('#answerDiv').children();
                for(i=0;i<childNodes.length;i++) {
                    if(childNodes[i].innerHTML) {
                        line = childNodes[i].innerHTML;
                        line = line.replace(/<br>/g,"\n")
                        code = code + line;
                    }
                }
                document.getElementById('answer').value = code;

            }
            );
        },
        error:errorCall,
        data:$('#createComponent').serializeArray(),
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function clearProblem() {
    $( "#generatedProblem" ).empty();
}

function removeGeneratedProblem(id) {
    $(id).remove();
    var num_ele = $(".scod_gen_prob").length;
    if(num_ele == 0){
        $("#scod_gen_prob_done").remove();
    }
}
function showProblemDetails(pUrl) {
    var values = $("#selectedPoolType").serialize();
    var lang = 'null';
    if(document.getElementById('languageid')!==null)
            lang = document.getElementById('languageid').value;

    if(document.getElementById('problemid').value !=='' && lang!=='null') {
        showWait();
        requestObj = {
            url:pUrl+"?"+values,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("problemDetailsDiv").innerHTML = data;
                $('#problemDetailsDivDialog').modal('show');
            },
            error:errorCall,
            data:{"selectedProblemType":document.getElementById('selectedProblemType').value,"selectedContest":document.getElementById('selectedContest').value ,"problemid":document.getElementById('problemid').value,"languageid":document.getElementById('languageid').value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }
    else if(document.getElementById('problemid').value !=='' && lang==='null') {
        showWait();
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data, textStatus) {
                globalComplete(data,textStatus);
                document.getElementById("problemDetailsDiv").innerHTML = data;
                $('#problemDetailsDivDialog').modal('show');
            },
            error:errorCall,
            data:{"selectedContest":document.getElementById('selectedContest').value ,"problemid":document.getElementById('problemid').value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);

    }
    else {
        alert("No Problem Selected");
    }


}

function simluateCodeTrace(pUrl,probid) {
    showWait();
    document.getElementById('simulateProblem').value = probid;
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("simulateDiv").innerHTML = data;
        },
        error:errorCall,
        data:$('#createComponent').serializeArray(),
        timeout: ptimeout
    };
    $.ajax(requestObj);
}
/* Testing Components Problem Creation - End */

/* Project component functions - STARTS */

function compileProjectWorkspace(pUrl) {
    showWait();
    requestObj = {
        url: pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("observations").innerHTML = data;            
            $("#observations").show();
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function forceReloadProjectWorkspace(pUrl,controlUrl,forceReplace) {
    if(forceReplace == "true") {
        var v = confirm("All your changes will be replace with the template code.\n Do you want to continue?")
        if(v == true) {
            getProjectEditorNew(pUrl,controlUrl,forceReplace)
        }
    }
}

function  saveProjectWorkspace() {
    var codiad = document.getElementById('editorFrame').contentWindow.codiad
    var path = codiad.active.getPath();
    codiad.active.save(codiad.active.getPath());
}

function getProjectEditorNew(pUrl,controlUrl,forceReplace) {
    if(document.getElementById("view") != null){
        $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('selectedLang').value+"&forceReplace="+forceReplace+"&view="+document.getElementById("view").value);
    }
    else{
       $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('selectedLang').value+"&forceReplace="+forceReplace); 
    }
    $("#editorFrame").attr('width',"100%");
    $("#editorFrame").attr('height',"600px");
    document.getElementById('editorFrame').style.display = 'block';

    $.ajax({
        url: controlUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            $("#projectcontrols").html(data);
            $("#executeDialogDiv").show();
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    });

    //document.getElementById('saveworkspacelink').style.visibility = 'visible';
    if(document.getElementById('compileworkspacelink'))
        document.getElementById('compileworkspacelink').style.visibility = 'visible';
    if(document.getElementById('executeworkspacelink'))
        document.getElementById('executeworkspacelink').style.visibility = 'visible';
    if(document.getElementById('submitworkspacelink'))
        document.getElementById('submitworkspacelink').style.visibility = 'visible';
    if(document.getElementById('editorFrame-fs-control'))
        document.getElementById('editorFrame-fs-control').style.visibility = 'visible';    
    initMaximizer('editorFrame','')
}

function getProjectEditorSolution(pUrl,controlUrl,forceReplace) {

    $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('selectedLang').value+"&forceReplace="+forceReplace+"&selectedDBLangId="+document.getElementById('selectedDBLang').value);
    $("#editorFrame").attr('width',"100%");
    $("#editorFrame").attr('height',"600px");
    document.getElementById('editorFrame').style.display = 'block';

    $.ajax({
        url: controlUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            $("#projectcontrols").html(data);
            $("#executeDialogDiv").show();
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"selectedDBLangId":document.getElementById('selectedDBLang').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    });
}

function getViewFrame(pUrl,controlUrl) {
    $("#viewFrame").attr('src', pUrl);
    $("#viewFrame").attr('width',"100%");
    $("#viewFrame").attr('height',"600px");
    $('#projectPane').show();
}
function dpCreateEvents(ele, target, control) {
    var remoteDocument=ele.contentWindow.document;
    $(remoteDocument).keydown(function(e){
     e = e || event
     if(e.altKey && e.keyCode == 13){
        fsControl(target,control);
        e.preventDefault();
     }
     else if(e.keyCode == 27)
     {
         if($('#'+target).hasClass("fullScreen-Window")){
            fsControl(target,control);
            e.preventDefault();
         }
     }
    });
    var resizeTrigger = function(){
        var editorHeight = ($(".attempt-holder").height() - ($('#output-holder').outerHeight(true)));
        console.log('dp project editorHeight',editorHeight);
        var remHeight = editorHeight - $('#dp-editor-change-holder').outerHeight(true);
        console.log('dp project remHeight',remHeight);
        $(remoteDocument).find("#file-manager").height(remHeight);
        $(remoteDocument).find("#sb-right").hide();
        console.log($(remoteDocument).find("#file-manager"));
        //debugger;
    };
    resizeTrigger();
    $("#"+target).resize(resizeTrigger);
}

function dpGetProjectEditorNew(pUrl,controlUrl,forceReplace) {

    $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('selectedLang').value+"&forceReplace="+forceReplace);
    $("#editorFrame").attr('width',"100%");
    $("#editorFrame").attr('height',"600px");
    document.getElementById('editorFrame').style.display = 'block';
    //debugger;
    $.ajax({
        url: controlUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            $("#output-buttons-holder").html(data);
            $("#output-buttons-holder").show();
            //debugger;
            $("#executeDialogDiv").show();
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    });
    //debugger;
    //document.getElementById('saveworkspacelink').style.visibility = 'visible';
    if(document.getElementById('compileworkspacelink'))
        document.getElementById('compileworkspacelink').style.visibility = 'visible';
    if(document.getElementById('executeworkspacelink'))
        document.getElementById('executeworkspacelink').style.visibility = 'visible';
    if(document.getElementById('submitworkspacelink'))
        document.getElementById('submitworkspacelink').style.visibility = 'visible';
    if(document.getElementById('editorFrame-fs-control'))
        document.getElementById('editorFrame-fs-control').style.visibility = 'visible';
    initMaximizer('editorFrame','');
    
}

function dpCompileProjectWorkspace(pUrl) {
    showWait();
    requestObj = {
        url: pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            if(data.indexOf('Program Saved Successfully',0) > 0 || data.indexOf('Compilation Successful',0) > 0) {
                $("#observations").attr("class","alert alert-success");
                $("#compilation-success-indicator").show();
            }
            else if(data.indexOf('Compilation Errors',0) > 0) {
                $("#observations").css('border','1px solid #f66e6b')
                $("#observations").attr("class","alert alert-danger");
                var htmlContent = data;
                $("#observations").html(htmlContent);
                $("#compilation-error-indicator").show();
                $("#observations").show();
                //$("#observationstabtwo").attr("class","alert alert-danger");
            }
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}

function dpExecuteProjectWorkSpace(executeAppLink) {
    var selectedLang = window.frames[0].document.getElementById("selectedLangName").value;
    if(selectedLang == "PHP" || selectedLang == "ASP" || selectedLang == "JEE" || selectedLang == "HTML" || selectedLang == "NodeJS" || selectedLang == "Angular" || selectedLang.toLowerCase() == "mean"  || selectedLang.toLowerCase() == "react" || selectedLang == "Grails" ) {
        executeWebApplication(executeAppLink,selectedLang);
    }
    else if(selectedLang == "Verilog" || selectedLang == "Modelsim"){
        $('#verilogDialog').modal('show');
    } 
    else {
//        document.getElementById('executeDialogDiv').scrollIntoView();
        amphiflip('EditorFlip');
        $("#executeDialogDiv").show();
        executeProject();
        //$('#executeDijitDialog').modal('show');
    }
}



/* Project component functions - END */

/* Dependency ajax class */
function lookupArtifacts(action,addAction,keyword,options,start) {
    if(!keyword)
        keyword = $("#keyword").val()
    var url
    if(start==undefined){
        start = 0
    }
    if(options)
        url = action+"?keyword="+keyword+"&options="+options+"&start="+start
    else
        url = action+"?keyword="+keyword+"&start="+start

    $.ajax({
        url: url,
        dataType:"json",
        success:function(data) {
            //var result = eval(data)
            hideWait();
            console.log(data)
            var docs = data.response.docs
            $("#artifacts").find("tr:gt(0)").remove();
            for(i=0;i<docs.length;i++) {
                var artifact = docs[i]
                var v
                if(artifact.latestVersion) {
                    v = artifact.latestVersion
                }else {
                    v = artifact.v
                }
                var row = "<tr><td><a href=\"javascript:void(0);\" onclick=\"lookupArtifacts(\'"+action+"\',\'"+addAction+"\',\'g:"+artifact.g+"\')\">"+artifact.g+"</a></td><td>"+artifact.a+"</td><td>"+artifact.a+"</td><td><a href=\"javascript:void(0);\" onclick=\"addDependency(\'"+addAction+"\',\'"+artifact.g+"\',\'"+artifact.a+"\',\'"+v+"\')\">"+v +"</a>"
                if(artifact.versionCount)
                    row += " <a href=\"javascript:void(0);\" onclick=\"lookupArtifacts(\'"+action+"\',\'"+addAction+"\',\'g:"+artifact.g +" AND a:"+ artifact.a+"\','core=gav')\">all("+artifact.versionCount+")</a>"
                row += " </td></tr>"
                $('#artifacts tr:last').after(row)
            }

                row = "<tr><td colspan='4' style='text-align:right'>"
                    if(start>=20){
                        row += "<a href='javascript:void(0)' class='btn btn-primary' onclick=\"showWait();lookupArtifacts('"+action+"','"+addAction+"','"+(!keyword ? '' : keyword)+"','"+(!options ? '' : options)+"',"+(start-20)+")\" >Previous</a>&nbsp;&nbsp;&nbsp;&nbsp;"
                    }
                    if(docs.length == 20){
                        row += "<a href='javascript:void(0)' class='btn btn-primary' onclick=\"showWait();lookupArtifacts('"+action+"','"+addAction+"','"+(!keyword ? '' : keyword)+"','"+(!options ? '' : options)+"',"+(start+20)+")\" >Next</a>"
                    }
                    row += "</td></tr>"
                $('#artifacts tr:last').after(row)
        },
        error:function(data) {
            alert("Error while fetching artifacts")
        }
    })
}

function addDependency(action,group,name,version) {
    /*alert(group+":"+name+":"+version)*/

    var langId = $("#language_id :selected").val()
    /*alert($("#language.id"))
    alert("langId:"+langId)*/
    params = "groupId="+encodeURIComponent(group)+"&name="+encodeURIComponent(name)+"&version="+encodeURIComponent(version)+"&language.id="+encodeURIComponent(langId)

    $.ajax({
        url: action,
        data:params,
        type:"POST",
        dataType:"HTML",
        success: function(data) {
            $("#showDependencies").html(data)
            alert("Dependency added to the problem")
        },
        error: function(data) {
            alert("Error while adding dependency to the problem")
        }

    })
}
/* Webapplication execute functions - START */
var webAppConsoleUrl
function executeWebAppHandler(status,textStatus) {
    console.log(status)
    if(status.result == "success") {
        $("#observations").html("")
        $("#observationClear").css("display", "none")

        webAppConsoleUrl = status.consolePath
        window.open(status.path)

        var exeControls = document.getElementById("exeControls")
        if(exeControls) {
            exeControls.setAttribute("style", "display:inline")
        }
    }else {
        alert("Error while building the application")
        alert(status.description)
        $("#observations").html("<div class=\"alert alert-danger\">"+status.description.replace(/\n/g, "<br />")+"</div>")
        $("#observationClear").css("display", "inline")
        webAppConsoleUrl = ""
        var exeControls = document.getElementById("exeControls")
        if(exeControls) {
            exeControls.setAttribute("style", "display:none")
        }
    }
    globalComplete(status,textStatus);
}
function clearObservation() {
    $("#observations").html("")
    $("#observationClear").css("display", "none");
    $("#observations").attr('class','');
}
function launchWebApplication(executeAppLink) {
    //alert("inside launch")inline
    showWait();
    jQuery.ajax({
        url:executeAppLink+"?time="+new Date().getMilliseconds(),
        success: executeWebAppHandler,
        error: function() {
            alert("Unable to execute the application");
            var exeControls = document.getElementById("exeControls")
            if(exeControls) {
                exeControls.setAttribute("style", "display:none")
            }
            errorCall()
        },
        dataType:'json'
    })
}

function showServerLog(openLogUrl) {
    if(webAppConsoleUrl != "") {
        //window.open(webAppConsoleUrl)
        window.open(openLogUrl)

    }else {
        alert("No log file found")
    }
}

function executeWebApplication(executeAppLink) {
    showWait();
    var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
    jQuery.ajax({
        url:executeAppLink+"&selectedLang="+selectedLang+"&time="+new Date().getMilliseconds(),
        success: function(data,textStatus) {executeWebAppHandler(data,textStatus) },
        error: function() {
            alert("Unable to execute the application");
            errorCall()
        },
        dataType:'json'
    })
}

function terminateApplication(terminateAppLink) {
    var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
    showWait();
    jQuery.ajax({
        url:terminateAppLink+"&selectedLang="+selectedLang+"&time="+new Date().getMilliseconds(),
        success: terminateApplicationHandler,
        error: function() {
            alert("Unable to terminate application");
            errorCall()
        },
        dataType:'json'
    })
}
function terminateApplicationHandler(data,textStatus) {
    if(data.result == "success") {
        alert("Application terminated")
        var exeControls = document.getElementById("exeControls")

        if(exeControls) {
            exeControls.setAttribute("style", "display:none")

        }
    }else {
        alert("Unable to terminate application")
    }
    globalComplete(data,textStatus);
}

function submitProjectWorkspace(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            
            if($(data).filter("#viewType").val() === "online" && data.indexOf('Your Code has been sent for evaluation successfully',0) > 0){
                hideWait();
                if($("#pushSubmissionStatusLive").length > 0){
                    updateSubmissionStatusResult();
                }
                else{
                    $("#submitworkspacelink").prop("disabled",true);
                    document.getElementById("observations").innerHTML = "Solution evaluation is under progress, Results will be shared shortly."
                    $("#observations").attr("class","alert alert-success");
                    $("#observations").show();
                    $("#submission-status-pane").hide();
                    $('#submission-loading').jmspinner();
                    projectSubmissionStatus($("#userProSubStatusLink").val(),0);
                }
            }else{
                $("#observations").show();                                                
                if(data.indexOf('Project is Empty',0) > 0) {
                    $("#observations").css("display","block");                    
                    $("#observations").attr("class","alert alert-success");
                    document.getElementById("observations").innerHTML = data;
                    $('#observations a').css('margin-top',0);
                }
                else{
                    document.getElementById("observations").innerHTML = "<div class=\"alert alert-success\">"+data+"</div>";
                }                
            }
        },
        error:errorCall,
        data:{"selectedLang":document.getElementById('selectedLang').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


function dpSubmitProjectWorkspace(pUrl) {
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            var result = $.trim(data);
            if(result === "online"){
                hideWait();
                $("#observations").hide();
                $("#submission-status-pane").hide();
                $('#submission-loading').jmspinner();
                projectSubmissionStatus($("#userProSubStatusLink").val(),0);
            }else{
                $("#observations").css('display','block')
                $(".alert-notifier").hide()
                $("#executionPane").hide()
                $("#observations").css('border','1px solid #47a88a')
                $("#observations").removeClass('alert-success').removeClass("alert-danger").removeClass("alert")
                $("#observations").html(data)
                $("#observations").css('color','#47a88a')
            }
        },
        error:errorCall,
        data:{"selectedLang":document.getElementById('selectedLang').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


/* Webapplication execute functions - END */

/* Problem Pool Tree Start */

function deleteProblemPool(pUrl) {
    flag = 0;
    if(confirm("Are you sure?"))
        flag = 1;
    if(flag === 1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:saveOrUpdateProblemPoolReady,
            error:errorCall,
            data: {"selid":document.getElementById("selid").value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
        showWait();
    }
}


function saveOrUpdateProblemPool(pUrl) {
    showWait();
    //alert(document.getElementById("visible").checked);
    requestObj = {
        url: pUrl,
        success: saveOrUpdateProblemPoolReady,
        type:'POST',
        error: errorCall,
        data: {"name":document.getElementById("name").value,"description":document.getElementById("description").value,
            "visible":document.getElementById("visible").checked,"_visible":document.getElementsByName("_visible")[0].value,
            "parent.id":document.getElementById("parent.id").value,"depth":document.getElementById("depth").value,
            "catid":document.getElementById("catid").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function saveOrUpdateProblemPoolReady(data,textStatus) {
    globalComplete(data,textStatus);
    $("#Problems").html(data);
//    document.getElementById('tab2').innerHTML = data;
    $('#tab2').html(data);
    treeViewAndContextMenu();
}

function crudProblemPool(pUrl,act) {
    requestObj = {
        url:pUrl,
        type:'POST',
        success:addProblemPoolReady,
        error:errorCall,
        data: {"selid":document.getElementById("selid").value,"act":act,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
    showWait();
}

function addProblemPoolReady(data,textStatus) {
    globalComplete(data,textStatus);
    document.getElementById('catcrudDialog').innerHTML = data;
    $("#catDialog").modal('show');
}


/* Problem Pool Tree End */

/* Project Code editor fullscreen */
function createEvents(ele, target, control) {
    var remoteDocument=ele.contentWindow.document;
    $(remoteDocument).keydown(function(e){
     e = e || event
     if(e.altKey && e.keyCode == 13){
        fsControl(target,control);
        e.preventDefault();
     }
     else if(e.keyCode == 27)
     {
         if($('#'+target).hasClass("fullScreen-Window")){
            fsControl(target,control);
            e.preventDefault();
         }
     }
    });
    var resizeTrigger = function(){
        $(remoteDocument).find("#file-manager").height($(remoteDocument).height());
    };
    resizeTrigger();
    $("#"+target).resize(resizeTrigger);
}

function initMaximizer(target, control) {
    var te=jQuery("#"+target);
    var ce=jQuery("#"+control);
    ce.css("display","none");
    window.onkeydown = function(e){
     e = e || event
     if(e.altKey && e.keyCode == 13){
        fsControl(target,control);
        e.preventDefault();
     }
     else if(e.keyCode == 27)
     {
         if(te.hasClass("fullScreen-Window")){
            fsControl(target,control);
            e.preventDefault();
         }
     }
    }
}

function fsControl(target, control) {
    var te=jQuery("#"+target);
    var ce=jQuery("#"+control);
    var cb=jQuery("#"+target+"-fs-control");
    if(te.hasClass("fullScreen-Window")){
            te.removeClass("fullScreen-Window");
            ce.removeClass("fullScreen-Window-control");
            cb.html('<span class="glyphicon glyphicon-resize-full"/>');
            fullScreenApi.cancelFullScreen(document.documentElement);
    }
    else{
            te.addClass("fullScreen-Window");
            ce.addClass("fullScreen-Window-control");
            cb.html('<span class="glyphicon glyphicon-resize-small"/>');
            fullScreenApi.requestFullScreen(document.documentElement);
    }
}

function addPoolToDbmsComp(pUrl,compid,poolid,complexityid) {
    showWait();
    var canProceed = checkProblemCount();
    if(canProceed){
        console.log("in if of can proceed");
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data,textStatus) {
                globalComplete(data,textStatus);
                showProblemCart();
            },
            error:errorCall,
            data:{"id":compid,"selectedPool":poolid,"selectedComplexity":complexityid,"problemcount":document.getElementById('problemcount').value,"selectedQueryProb":document.getElementById('selectedQueryProb').value,"dummy":new Date().getTime()},
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }else{
        hideWait();
    }

}

function crudTestdataToQueryProb(pUrl,op,tid) {
    if(op == 'add')
        tid = document.getElementById('testdataid').value;
    showWait();
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            document.getElementById("divTestdataSet").innerHTML = data;

        },
        error:errorCall,
        data:{"name":document.getElementById('tdname').value, "id":document.getElementById('qid').value,"op":op,"testdataid":tid,"weightage":document.getElementById('weightage').value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);

}


/* Rearrange Problems */
function showFixedProlemsDialog(pUrl) {
      $('#rearrangeDialog').modal('show');
      $('#rearrangeDialog').on('shown.bs.modal',function(){
            amphiSortable(".rearrangeElements",function($item){
                  var ids=[];
                  $item.parent().children().each(function(){
                        ids.push($(this).attr("id"));
                  });
                  var data=ids.join();
                  $.ajax({
                        url:pUrl,
                        before:showWait,
                        success:function(data) {
                              hideWait();
                        },
                        data: {
                              "str":data,
                              "cid":document.getElementById('id').value,
                              "dummy":new Date().getTime()
                        },
                        type:'post',
                        error:errorCall
                  });
            });
      });
      $('#rearrangeDialog').on('hide.bs.modal',function(){
            showWait();
            location.reload(false);
      });
}
function obtainCACheckRules() {
    var selectedCACheckId = $("#caCheck").val();
    var caCheckRuleGroupId = $("#caCheckRuleGroupId").val();
    $.ajax({
        url: contextPath + "/CACheckRuleGroup/obtainCACheckRule",
        type: 'POST',
        data: {"selectedCACheckId": selectedCACheckId, "caCheckRuleGroupId": caCheckRuleGroupId},
        before: function(){
            showWait();
        },
        success: function(data, ioArgs) {
            $("#caCheckRules").html(data);
            hideWait();
        },
        error: errorCall
    });
}

function refreshFlowchart(url,divid){
    $.ajax({
        url: url,
        type: 'POST',
        before: function(){
            showWait();
        },
        success: function(data, ioArgs) {
            if(data == ""){
                location.reload();
            }
            else{
               $("#"+divid).html(data);
            }
            hideWait();
        },
        error: errorCall
    });
}

function compileProjectWorkspace(pUrl) {
    showWait();
    requestObj = {
        url: pUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            $("#observations").html(data);
            if($("#observations .alert").innerHeight()>190){
                $("#observations").html($("#observations-newwindow").html()+$("#observations").html());
            }
            $("#observations").removeClass();
            $("#observations").show();
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}


function saveJUnitTestSuite(pUrl){
    showWait();
    $('#testSuiteFormModal').modal('hide');
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            $("#testSuiteListDiv").html(data);
        },
        error:errorCall,
        data: {"tsname":$("#tsname").val(),"testSuitePurpose":$("#testSuitePurpose").val(),"tsdesc":$("#tsdesc").val(),"tscname":$("#tscname").val(),"tscode":$("#tscode").val(),"tsid":$("#tsid").val(),"tsassid":$("#tsassid").val(),"weightage":$("#tsweightage").val(),"probid":$("#probid").val(),"tsflId":$("#tsflId").val()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function saveJUnitTestcase(pUrl,updateDiv){
    showWait();
    $('#junittestcasemodal').modal('hide');
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            $("#"+updateDiv).html(data);
        },
        error:errorCall,
        data: {"tcname":$("#tcname").val(),"tcdesc":$("#tcdesc").val(),"tcmname":$("#tcmname").val(),"tchint":$("#tchint").val(),"tcid":$("#tcid").val(),"suiteId":$("#suiteId").val(),"tcweightage":$("#tcweightage").val(),"visibleInAttempt":$("#visibleInAttempt").is(':checked') ? "true" : "false", "problemId":$("#problemId").val()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function saveSoapUITestSuite(pUrl){
    showWait();
    $('#testSuiteFormModal').modal('hide');
    requestObj = {
        url:pUrl,
        type:'POST',
        success:function(data, textStatus) {
            globalComplete(data,textStatus);
            $("#testSuiteListDiv").html(data);
        },
        error:errorCall,
        data: {"tsname":$("#tsname").val(),"tsid":$("#tsid").val(),"weightage":$("#tsweightage").val(),"taname":$("#taname").val(),"taurl":$("#taurl").val(),"tastatus":$("#tastatus").val(),"probid":$("#probid").val(),"taid":$("#taid").val()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function loadQueryTemplate() {
    var templateQuery = $("#templateCodeHidden").val();
    codeEditor.setValue(codeEditor.getValue()+templateQuery);
}

function updateSchemaStatus() {
    $("#observations").html("<div class='message'>Data restored to original state</div>");
    $("#observations").show();
    $("#clear").show();
}

function projectCompQueryEditor(lang){
    if(!projCompSqlQury){
            projCompSqlQury = CodeMirror.fromTextArea(document.getElementById("projCompSqlQury"), {
            lineNumbers: true,
            matchBrackets: true,
            autofocus: true,
            mode: lang
        });
    }
    $("#projCompSqlPane").show();
}

function execProjectCompQuery(url){
    $.ajax({
        url : url,
        type: "POST",
        data:{
        "query":projCompSqlQury.getValue(),
        "dummy":(new Date().getTime())
        },
        before:function(){showWait()},
        success:function(data){
            $("#queryResult").html(data);
            hideWait();
        }
    });
}

function uploadProjectOffline(pUrl,resultMsg,compId,problemId) {        
    $.ajax({
        url: pUrl,
        type: 'POST',
        data: {            
            compId:compId,
            problemId:problemId
        },
        success: function(data) {           
            $("#projectUploadStatus").attr("class","message");
            $("#projectUploadStatus").html(resultMsg);    
            $("#resultTable").html(data);      
            hideWait();
        },
        error: errorCall
    });
}
function uploadProjectErrorOffline(pUrl,resultMsg,compId,problemId) {      
    $.ajax({
        url: pUrl,
        type: 'POST',
        data: {            
            compId:compId,
            problemId:problemId
        },
        success: function(data) {                 
            $("#projectUploadStatus").attr("class","errors");
            $("#projectUploadStatus").html(resultMsg);    
            $("#resultTable").html(data);      
            hideWait();
        },
        error: errorCall
    });
}
function uploadProject(resultMsg) {    
    $("#projectUploadStatus").attr("class","message");
    $("#projectUploadStatus").html(resultMsg);                
    hideWait();    
}
function uploadProjectError(resultMsg) {                  
    $("#projectUploadStatus").attr("class","errors");
    $("#projectUploadStatus").html(resultMsg);                
    hideWait();   
}
var reportDuration;
function autoReloadDashboardData(url,selector,reportDuration){
    $.ajax({
      url:url,
      success: function(data) {
        $(selector).html(data);
        if(reportDuration == undefined){
            reportDuration = 10000;
        }
        setTimeout(autoReloadDashboardData,reportDuration,url,selector)
      }
    });                 
}

function validateTestcaseName(url){
    var name = $("#tcname").val();
    if(!name.trim()) {
        document.getElementById('errors').innerHTML="Testcase name cannot be null";
        document.getElementById('errors').style.display='block';
        document.getElementById('success').style.display='none';   
    }
    else {
        saveTestcase(url);
    }
}

function updateLanguageConfigDetails(url){
    var searchTeamId = $("#searchTeamId").val();
    var languageid = $("#languageid").val();
    $.ajax({
        url:url,
        data:{languageid:languageid,searchTeamId:searchTeamId},
        before: showWait(),
        success: function(data) {
            $("#runningTime").val(data.runningTime);
            $("#memorySpace").val(data.memorySpace);
            $("#langaugeVisibility").prop('checked',data.visible);
            hideWait();
        },
        error: function(data) {
            hideWait();
        }
    });
}

function showProblemsCartForContest(identifier){
       var selectedQuesPaper = $("#selectedQuesPaper"+identifier).val();       
       var url = $('#problemcartlink').val();
        $.ajax({
            url:url,
            data:{"selectedQuesPaper":selectedQuesPaper,"dummy":new Date().getTime()},            
            success: function(data) {                
                $('#problemCart-Ques'+selectedQuesPaper).html(data);
                hideWait();
            },
            error: function(data) {
                hideWait();
            }
        });
    } 
    
    function showChangedCartForContest(quesPaperId){
       var selectedQuesPaper = quesPaperId       
       var url = $('#problemcartlink').val();
        $.ajax({
            url:url,
            data:{"selectedQuesPaper":selectedQuesPaper,"dummy":new Date().getTime()},
            before: showWait(),
            success: function(data) {                
                $('#problemCart-Ques'+selectedQuesPaper).html(data);
                hideWait();
            },
            error: function(data) {
                hideWait();
            }
        });
    }
    function showFixedProlemsDialogContest(pUrl,quesPaperId) {
      $('#rearrangeDialog-Ques'+quesPaperId).modal('show');
      $('#rearrangeDialog-Ques'+quesPaperId).on('shown.bs.modal',function(){
            amphiSortable(".rearrangeElements",function($item){
                  var ids=[];
                  $item.parent().children().each(function(){
                        ids.push($(this).attr("id"));
                  });
                  var data=ids.join();
                  $.ajax({
                        url:pUrl,
                        before:showWait,
                        success:function(data) {
                              hideWait();
                        },
                        data: {
                              "str":data,
                              "cid":document.getElementById('id').value,
                              "quesPaperId":quesPaperId,
                              "dummy":new Date().getTime()
                        },
                        type:'post',
                        error:errorCall
                  });
            });
      });
      $('#rearrangeDialog-Ques'+quesPaperId).on('hide.bs.modal',function(){
            showWait();
            location.reload(false);
      });
      
      
    
    
    } 
    
    function addProbsFrmPoolContest(probId){
        var selectedQuesPaper = $("#selectedQuesPaperPool").val();        
        var url = $('#addSingleProblemLink').val();
        $.ajax({
            url:url,
            data:{"selectedQuesPaper":selectedQuesPaper,"selectedProblem":probId,"dummy":new Date().getTime()},
            before: showWait(),
            success: function(data) {
                showProblemsCartForContest("Pool");
                hideWait();
            },
            error: function(data) {
                hideWait();
            }
        });
    }
    
function addSinglePoolToQuesPaper() {

    var contestId = document.getElementById('contestId').value
    var totalCount = document.getElementById('totalCount').value
    var selectedPool = document.getElementById('selectedPool').value
    var selectedComplexity = document.getElementById('selectedComplexity').value
    var problemcount = document.getElementById('problemcount').value
    var selectedQuesPaper = $("#selectedQuesPaperPool").val();
    var canProceed = checkProblemCount();
    if(canProceed){
        requestObj = {
            url:contextPath+"/contestComponent/addSinglePoolToContest",
            type:'POST',
            before: showWait(),
            data : {
                "id":contestId,
                "totalCount":totalCount,
                "selectedPool":selectedPool,
                "selectedComplexity":selectedComplexity,
                "problemcount":problemcount,
                "selectedQuesPaper":selectedQuesPaper
            },
            success:function(data, textStatus){                
                    showProblemsCartForContest('Pool'); 
                    hideWait();
            },
            error:errorCall,
            timeout: ptimeout
        };

        $.ajax(requestObj);
    }

}

function set_readonly(codeEditor,readonly_ranges) {        
      var  session  = codeEditor.getSession()
          , Range    = ace.require("ace/range").Range;
          ranges    = [];        

      function before(obj, method, wrapper) {
        var orig = obj[method];
        obj[method] = function() {
          var args = Array.prototype.slice.call(arguments);
          return wrapper.call(this, function(){
              return orig.apply(obj, args);
          }, args);
        }
        return obj[method];
      }
      function intersects(range) {
          return codeEditor.getSelectionRange().intersects(range);
      }
      function intersectsRange(newRange) {
        for (i=0;i<ranges.length;i++)
          if(newRange.intersects(ranges[i]))
            return true;
        return false;
      }
      function preventReadonly(next, args) {
          for(i=0;i<ranges.length;i++){if (intersects(ranges[i])) return;}
          next();
      }
      function onEnd(position){
        var row = position["row"],column=position["column"];
        for (i=0;i<ranges.length;i++)
          if(ranges[i].end["row"] == row && ranges[i].end["column"]==column)
            return true;
        return false;
      }
      function outSideRange(position){
        var row = position["row"],column=position["column"];
        for (i=0;i<ranges.length;i++){
          if(ranges[i].start["row"]< row && ranges[i].end["row"]>row)
              return false;
          if(ranges[i].start["row"]==row && ranges[i].start["column"]<column){
              if(ranges[i].end["row"] != row || ranges[i].end["column"]>column)
                return false;
          }
          else if(ranges[i].end["row"] == row&&ranges[i].end["column"]>column){
                return false;
          }
        }
        return true; 
      }
      function obtainReadOnlyLines(){
        var readOnlyLines = "";
        var itr = 0
        for(i=0;i<ranges.length;i++){
            for(var j=ranges[i].start.row+1;j<=ranges[i].end.row;j++){
                if(itr == 0){
                   readOnlyLines +=j  
                }
                else{
                   readOnlyLines += ","+j   
                }
                itr++;
            }
        }
        return readOnlyLines;
      }
      codeEditor.obtainReadOnlyLines = obtainReadOnlyLines;
            for(i=0;i<readonly_ranges.length;i++){
                ranges.push(new Range(readonly_ranges[i][0],readonly_ranges[i][1],readonly_ranges[i][2],readonly_ranges[i][3]));
            }
            ranges.forEach(function(range){session.addMarker(range, "readonly-highlight");});        
            codeEditor.keyBinding.addKeyboardHandler({
                handleKeyboard : function(data, hash, keyString, keyCode, event) {
                  if (Math.abs(keyCode) == 13 && onEnd(codeEditor.getCursorPosition())){
                    return false;
                  }
                  if (hash === -1 || (keyCode <= 40 && keyCode >= 37)) return false;
                  for(i=0;i<ranges.length;i++){
                    if (intersects(ranges[i])) {
                        return {command:"null", passEvent:false};
                    }
                  }
                }
            });
      before(codeEditor, 'onPaste', preventReadonly);
      before(codeEditor, 'onCut',   preventReadonly);
      for(i=0;i<ranges.length;i++){
        ranges[i].start  = session.doc.createAnchor(ranges[i].start);
        ranges[i].end    = session.doc.createAnchor(ranges[i].end);
        ranges[i].end.$insertRight = true;
       }

      var old$tryReplace = codeEditor.$tryReplace;
      codeEditor.$tryReplace = function(range, replacement) {
          return intersectsRange(range)?null:old$tryReplace.apply(this, arguments);                        
      }
      var session = codeEditor.getSession();
      var oldInsert = session.insert;
      session.insert = function(position, text) {
          return oldInsert.apply(this, [position, outSideRange(position)?text:""]);
      }
      var oldRemove = session.remove;
      session.remove = function(range) {
          return intersectsRange(range)?false:oldRemove.apply(this, arguments);                        
      }
      var oldMoveText = session.moveText;
      session.moveText = function(fromRange, toPosition, copy) {
          if (intersectsRange(fromRange) || !outSideRange(toPosition)) return fromRange;
          return oldMoveText.apply(this, arguments);
      }

}

function refresheditor(readonly) {  
    set_readonly(codeEditor,readonly);
}

function get_readonly_by_editable_tag(readOnlylines){
  var readOnlyStrArray = readOnlylines.split(",");
  var readonly_ranges=[];
  var readOnlyArr = []
  for(var i=0;i<readOnlyStrArray.length;i++){
        readOnlyArr[i] = parseInt(readOnlyStrArray[i])
  }
  readOnlyArr.sort();
  if(readOnlyArr.length > 0){
    var st = parseInt(readOnlyArr[0]);
    var end = st;
    for(var i=1;i<readOnlyArr.length;i++){
        var line = parseInt(readOnlyArr[i])
        if(line == end+1){
            end++;
        }
        else{
            readonly_ranges.push([st-1,0,end,0]);
            st=line;
            end = st;
        }
    }
    readonly_ranges.push([st-1,0,end,0]);
  }  
  refresheditor(readonly_ranges);
}

function readonly_lines(readOnlylines){
  var readonly_ranges=[];
  if(readOnlylines != -1 && readOnlylines != ''){      
    var readOnlyStrArray = readOnlylines.split(",");
    var line_numbers = []
    for(var i=0;i<readOnlyStrArray.length;i++){
          line_numbers[i] = parseInt(readOnlyStrArray[i])
    }
    line_numbers = line_numbers.sort(function(a, b){return a - b});
    for(var i=0;i<line_numbers.length;i++){
      readonly_ranges.push([line_numbers[i]-1,0,line_numbers[i],0]);
    }  
  }
  refresheditor(readonly_ranges);
}

function removeScodhvestSubmission(pUrl,ele){
    $.ajax({
        url:pUrl,
        type:'POST',
        before:showWait(),
        success: function(data, textStatus) {
            hideWait();
            if(Number(data.submissionRemoved) == 1){
                $(ele).parents('tr').hide();                  
            }            
        },
        error: errorCall
    });    
}

function removeGetEditor(){
    $('#init-code-edit').remove();
}

function initTopBottomView(){
    var wh = window.innerHeight;
    var getAttemptHeaderHeight = document.querySelector('.attempt-wrapper').offsetHeight;
    var CalQusWrapperHeight = wh-getAttemptHeaderHeight;    
    document.querySelector('.top-bottom-wrapper').style.height = CalQusWrapperHeight +'px';
    document.querySelector('.movie-learn').style.height = CalQusWrapperHeight +'px';
    document.querySelector('.scroll-element').style.height = CalQusWrapperHeight - 68 +'px';
    $('.scroll-element').fakeScroll();
    $(".goto-action").click(function(e) {
        e.preventDefault();
        $('.top-bottom-wrapper').animate({
            scrollTop: $('#slove-attempt').offset().top},
            'slow');
    }); 
    closePopOver();
}

function closePopOver() {
    $(".close-popover").click(function () {
        $(this).closest('.ebox-popover').css("display", "none")
        $('.popoveroverlay').hide();
    });
}

function getProjectEditorInit(pUrl,controlUrl,forceReplace){
    if(document.getElementById("view") != null){
        $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('initLang').value+"&forceReplace="+forceReplace+"&view="+document.getElementById("view").value+"&notAssigned="+document.getElementById("notAssigned").value+"&partialSub="+document.getElementById("partialSub").value);
    }
    else{
       $("#editorFrame").attr('src', pUrl+"?selectedLang="+document.getElementById('initLang').value+"&forceReplace="+forceReplace); 
    }
    $("#editorFrame").attr('width',"100%");
    $("#editorFrame").attr('height',"600px");
    document.getElementById('editorFrame').style.display = 'block';
    var selectLang = $('#initLang').val();            
    $('#selectedLang').val(selectLang);

    $.ajax({
        url: controlUrl,
        type:'POST',
        success:function(data,textStatus) {
            globalComplete(data,textStatus);
            $('#select-lang-wrapper').remove();
            $("#projectcontrols").html(data);
            $('#program-head').css('display','block');
            $("#attempt-lang-wrapper").show();
            $("#editor-portion").show();
            $("#executeDialogDiv").show();   
        },
        error: errorCall,
        data: {"selectedLang":document.getElementById("initLang").value,"dummy":new Date().getTime()},
        timeout: ptimeout
    });
    
        if(document.getElementById('compileworkspacelink'))
            document.getElementById('compileworkspacelink').style.visibility = 'visible';
        if(document.getElementById('executeworkspacelink'))
            document.getElementById('executeworkspacelink').style.visibility = 'visible';
        if(document.getElementById('submitworkspacelink'))
            document.getElementById('submitworkspacelink').style.visibility = 'visible';
        if(document.getElementById('editorFrame-fs-control'))
            document.getElementById('editorFrame-fs-control').style.visibility = 'visible';    
    initMaximizer('editorFrame','')
}

function splitSave(){
    var pUrl = $("#split-saveLink").val()
    saveUserProgram(pUrl,"Save",2)
}

function startEditorTrackOnline() {
    keyList = document.getElementById('keywords').value.split(',');
    getMetricsFromCodeObj = setInterval("getMetricsFromCode()",editortrackinterval);
    if(intervaltime > 0)
        saveProgramObj = setInterval("compileOrExecuteProgram('"+autosaveurl+"','save',2)",intervaltime);
    updateTime();
    if(document.getElementById("disableCopyPaste").value === "true" && document.getElementById("program") !==null ) {
        codeEditor.onCopy = function(event) { $('#rdialog').modal('show'); return false; }
        codeEditor.onCut = function(event) { $('#rdialog').modal('show'); return false; }
        codeEditor.onPaste = function(event) { $('#rdialog').modal('show'); return false; }
        $('#editor-portion').bind('dragover drop', function(event){
            codeEditor.undo();
            $('#rdialog').modal('show');
            return false;
        });        
    }
}

function templateProjectDownload(){
    document.getElementById('selectedTempLang').value = document.getElementById('selectedLang').value;
    document.getElementById('templateDownloadForm').submit();
}

function showComplexityGraph(pUrl){
    $.ajax({
        url:pUrl,
        type:'POST',
        before:showWait(),
        success: function(data, textStatus) {
            hideWait();
            $('#complexityGraphDiv').html(data);
            $('#complexityGraphDialog').modal('show');
        },
        error: errorCall
    });
}


/* Code Template - Start */

function showCodeTemplate() {
//    dijit.byId('codeTemplateDialog').startup();
//    dijit.byId('codeTemplateDialog').show();
    jQuery('#codeTemplateDialog').modal('show');
}

function showCodeTemplateOnline() {
    var templateCode = $('#codeTemplateString').val();
    $("textarea#codeTemplate").val(templateCode);
    jQuery('#codeTemplateDialog').modal('show');
}

function insertCodeTemplate() {
    var content = " \n \n /* \n"+ document.getElementById("codeTemplate").value+"\n */"
    codeEditor.setValue(codeEditor.getValue()+content);
}


function redirectUrl(url,warn) {
    flag = 0;
    if(warn==='true') {
        if(confirm("Are you sure?"))
            flag = 1;
    }
    else 
        flag = 1;
    if(flag === 1)
        window.location.href = url;
}

function processAllCodesFromDiv() {
    for(x=0;x<probids.length;x++) {
        parseCodeFromDiv('tsTypethreeComponent','answerDiv'+probids[x],'answerCode'+probids[x]);
    }
}

function parseCodeFromDiv(comp,divnode,fieldname) {
    var code = '';
    var childNodes, line;
    if(comp == 'tsTypethreeComponent') {
        childNodes = $('#answerDiv').children();
        for(i=0;i<childNodes.length;i++) {
            if(childNodes[i].innerHTML) {
                line = childNodes[i].innerHTML;
                line = line.replace(/<br>/g,"\n")
                code = code + line;
            }
        }
        document.getElementById(fieldname).value = code;
    }
}

function insertTestData(id) {
    var data = document.getElementById(id).innerHTML
    //alert(escape(data));
    //alert(encodeURL(data));
    //data = escape(data);
    //alert(data);
    document.getElementById('currentTestData').value = document.getElementById('currentTestData').value+"\n"+data;
    document.getElementById('testDataQuery').value = document.getElementById('testDataQuery').value+"\n"+data;
}

function monitorSpaceinFillups(obj,event) {
    var key = event.keyCode || event.charCode;
    if( key == 8 || key == 46){					
        if(obj.innerHTML.length===1){
            obj.innerHTML='&nbsp;&nbsp;';
            //return false;
        }
    }
}
var attemptViewMode='serial';
function switchAttemptView(){
    if(attemptViewMode=='serial'){
        jQuery('#problemEditorPane').appendTo('#program_tab');
        jQuery('#executePane').appendTo('#execute_tab');
        jQuery('#problemTabPane').show();
        jQuery('#gotoeditortop').hide();
        attemptViewMode='tab';
    }
    else{
        jQuery('#problemEditorPane').appendTo('#problem_serialview_container');
        jQuery('#executePane').appendTo('#tab11');
        jQuery('#problemTabPane').hide();
        jQuery('#gotoeditortop').show();
        attemptViewMode='serial';
    }
}
function executeButtonClick(){
    execute();
    gotoExecutePane();
}
function wgpExecuteButtonClick(){
    wgpExecute();
    gotoExecutePane();
}

function gotoExecutePane(){    
    if(attemptViewMode=='serial'){
        smoothScrollTo('executePane');
        //jQuery('html, body,div').scrollTop($(document).height());
        //jQuery('#input').focus();
    }
    else{
        jQuery('a[href=#execute_tab]').trigger('click');
        
    }
}

function executeScodhvestButtonClick(){
    executeScodhvestEditor();
    if(attemptViewMode=='serial'){
        smoothScrollTo('executePane');
        //jQuery('html, body,div').scrollTop($(document).height());
        //jQuery('#input').focus();
    }
    else{
        jQuery('a[href=#execute_tab]').trigger('click');
        
    }
}

function setDbmsProblemData(fromdiv, todiv) {
    document.getElementById(todiv).innerHTML = document.getElementById(fromdiv).innerHTML;
}
/* Code Template - End */

function openFlowchartEditor(url,name){
    
    var windowName = 'Flowchart';
    if(name!=undefined){
        windowName = name;
    }
    window.open(url,windowName,'toolbar=no,directories=no,status=no,menubar=no,scrollbars=yes,fullscreen=yes,width='+screen.width+',height'+screen.height);
    
   
  
}

function rearrangeInDesc() {

    amphiSortable(".rearrangeElements",function() {

            var code = '';
            var childNodes, line;
            childNodes = $('#answerDiv').children();
            for(i=0;i<childNodes.length;i++) {
                if(childNodes[i].innerHTML) {
                    line = childNodes[i].innerHTML;
                    line = line.replace(/<br>/g,"\n")
                    code = code + line;
                }
            }
            document.getElementById('answer').value = code;

        }
        );


}

function declareProblem(burl, url, furl) {
    showWait();
    var compId = $('#execcompid').val();
    var asuaId = $('#userAttemptId').val();
    var selectedProblemId = $('#execprobid').val();
    var componentClassname = $('#componentClassName').val();
    $.ajax({
        type: 'post',
        url:burl,
        data : {
            id : compId ,
            asuaId : asuaId,
            selectedProblemId: selectedProblemId
        },
        success: function(data) {
            var message;
            var isAccepted = data["isAccepted"];
            var isNextProblemAvailable = data["isNextProblemAvailable"];
            if(isAccepted == false) {
                hideWait();
                if(isNextProblemAvailable == true) {
                    message = "Do you want to give up this problem ?<br/>If yes, you will not be able to undo or attempt this problem again.";
                } else {
                    message = "Already problem has been given up at this level.Giving up this problem will end your assessment.Do you want to give up this problem ?";
                }
                amphiConfirm(message,function(){
                    showWait();
                    $.ajax({
                        type: 'post',
                        url:url,
                        data : {
                            id : compId ,
                            asuaId : asuaId,
                            selectedProblemId: selectedProblemId
                        },
                        success: function(data) {
                            var statusMap = data
                            if(statusMap['decalaredStatus'] == true) {
                                if(componentClassname == "contestComponent") {
                                    codeEditor.setReadOnly(true);
                                } else if(componentClassname == "projectComponent") {
                                    $('#get-editor').click();
                                }
                                $('#declareButton').hide();
                                $('#submission-btn').hide();
                                $('#declaredMessage').show();
                                $('#submission-alert-btn').show();
                                if(statusMap['isNextProblemAvailable'] == true) {
                                    var nextProblemLink = $('#generateNextProblemLink').val();
                                    loadNextProblem(nextProblemLink)
                                } else {
                                    hideWait();
                                    message = "Your Assessment is Completed.<br/>Do you want to Finish this Assessment ?"
                                    amphiConfirm(message,function(){
                                        window.location.href = furl;
                                    },function(){});
                                }
                            }
                        },
                        error: function(req) {
                            $("#submission-loading").jmspinner(false);
                            errorCall(req);
                            hideWait();
                        }
                    });
                },function(){});
            } else {
                console.log(isNextProblemAvailable);
                if(isNextProblemAvailable == false) {
                    message = "Congratulations! You successfully completed the assessment.<br/>Do you want to Finish this Assessment ?"
                    amphiConfirm(message,function(){
                        window.location.href = furl;
                    },function(){});
                } else {
                    var nextProblemLink = $('#generateNextProblemLink').val();
                    loadNextProblem(nextProblemLink)
                }
            }
        },
        error: function(req) {
            $("#submission-loading").jmspinner(false);
            errorCall(req);
            hideWait();
        }
    });
}

function loadNextProblem(url) {
    var compId = $('#execcompid').val();
    var asuaId = $('#userAttemptId').val();
    var selectedProblemId = $('#execprobid').val();
    $.ajax({
        type: 'post',
        url:url,
        data : {
            id : compId ,
            asuaId : asuaId,
            selectedProblemId: selectedProblemId
        },
        success: function(data) {
            var nextProbUrl = $('#nextProbLink').val()
            var componentClassname = $('#componentClassName').val()
            transferAnswer(componentClassname);
            submitAttemptFormWithActionType('attemptForm',nextProbUrl,'Next');
            return(true);
            hideWait();
        },
        error: function(req) {
            $("#submission-loading").jmspinner(false);
            errorCall(req);
            hideWait();
        }
    });
}

/* Code Template - End */
/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor. 
 */ 
var getStatusCall;
function beforeDbmsCodeEditor(pUrl,spid,compid,index){
    var prevIndex  = document.getElementById('prevIndex').value;
    document.getElementById('probId').value = spid;
    document.getElementById('problemType').value = "dbmsSubQueryProblem";
    if(prevIndex != 0){
        saveDbmsCodeOnline(pUrl,spid,compid,index,autosaveurl,2);
    }
    else{
        showDbmsCodeEditor(pUrl,spid,compid,index);
    }
}

function showDbmsCodeEditor(pUrl,spid,compid,index){
    var prevIndex  = document.getElementById('prevIndex').value;   
    
    if(prevIndex != 0){
        $('#editor'+prevIndex).remove();
        $('.sub-'+compid+'-'+prevIndex).removeClass('active')
        if (autoSaveIntervalObj != "") {
            clearInterval(autoSaveIntervalObj);
            autoSaveIntervalObj = ""
        }
    }
    if(index != prevIndex){        
        $('#ques'+index).children('.panel-body').append("<div id='editor"+index+"'><div id='sqlEditorDialog'><div id='programEditor'></div></div></div>");
        document.getElementById('prevIndex').value = index;
        $('.sub-'+compid+'-'+index).addClass('active')
        getDbmsCodeEditorOnline(pUrl,spid,compid);
    }
    else if(index == prevIndex){
       document.getElementById('prevIndex').value = 0; 
    }   
}

function saveDbmsCodeOnline(pUrl,spid,compid,index,saveUrl,savetype){
    if(codeEditor.getSelection().length != 0) {
        document.getElementById('program').value = codeEditor.getSelection();
    } else {
        document.getElementById('program').value = codeEditor.getValue();
    }
    document.getElementById('savetype').value = savetype;
    document.getElementById('metricString').value=metricString.substring(0,metricString.length-1);
    if (autoSaveIntervalObj != "") {
        clearInterval(autoSaveIntervalObj);
        autoSaveIntervalObj = ""
    }
    var flag = 1;
    if(initdbmsquery === document.getElementById('program').value)
        flag = 0;
    if(flag ===1) {
        amphiConfirmDialog('Do you want to save changes to your code?',function(){
            requestObj = {            
                url:saveUrl,
                type:'POST',                        
                success:function(data){},
                complete:function(a,b){hideWait();},
                error:errorCall,
                //form: dojo.byId('executeDbmsForm'),
                //data:$('#executeDbmsForm').serializeArray(),
                data:serializeForm('executeDbmsForm'),
                timeout: ptimeout
            };
            $.ajax(requestObj);
            showDbmsCodeEditor(pUrl,spid,compid,index);
            
        },function(){
            showDbmsCodeEditor(pUrl,spid,compid,index);
        })        
    }
    else{
        showDbmsCodeEditor(pUrl,spid,compid,index);
    }
    
}

function getDbmsCodeEditorOnline(pUrl,spid,compid) {  
    if(!$('#processDialog').is(':visible')){
        showWait();
    }
    requestObj = {
        url:pUrl,
        type:'POST',
        success: function(data) {
            if(data == "sessionInterrupt") {
                showWait();
                alert("It seems session interrupted somewhere...");
                if(contextPath == undefined || contextPath == '') {
                    window.location.replace("/");
                }
                else {
                    window.location.replace(contextPath);
                }
            }
            else {
                getDbmsCodeEditorOnlineReady(data);
            }
        },
        complete:function(a,b){hideWait();},
        error:errorCall,
        data:{"probid":spid,"compid":compid,"dummy":new Date().getTime()},
        timeout: ptimeout
    };
    $.ajax(requestObj);
}

function getDbmsCodeEditorOnlineReady(data) {

    hideWait();     
    
    var dbmsEditorCharLimit = $("#dbmsEditorCharLimit").val();
    if(dbmsEditorCharLimit == undefined) {
        dbmsEditorCharLimit = 2000;
    }
    else {
        dbmsEditorCharLimit = parseInt(dbmsEditorCharLimit);
    }
    
    data = checkCommonIssues(data);             
        $('#programEditor').html(data);
        initdbmsquery = document.getElementById("program").value;
        codeEditor = CodeMirror.fromTextArea(document.getElementById("program"), {
            lineNumbers: true,
            matchBrackets: true,
            autofocus :true,
            mode: document.getElementById('codemirrorlang').value,
            onChange : function(cm,change) {
                if(cm.getValue(cm).length > dbmsEditorCharLimit) {
                    cm.setValue(cm.getOption("oldValue"));
                    cm.setOption("oldValue","");
                }
                return true;
            }
        });        
        document.getElementById('programEditor').style.visibility = "visible";
        document.getElementById('programEditor').focus();
        document.getElementById('programEditor').scrollIntoView();
        keyList = document.getElementById('keywords').value.split(',');

        if(intervaltime > 0) {            
            if(autoSaveIntervalObj != "") {
                clearInterval(autoSaveIntervalObj);
            }
            setInterval("getMetricsFromCode()",editortrackinterval);
            //console.log("intervaltime -> "+intervaltime);
            autoSaveIntervalObj = setInterval("executeDbmsScript('"+autosaveurl+"',2)",intervaltime);
        }
        updateTime();        
        if(document.getElementById("disableCopyPaste").value === "true" && document.getElementById("program") !==null ) {
            var obj = codeEditor.getWrapperElement().firstChild;            
            if(obj !== null) {
                obj.oncopy = function(event) { $('#rdialog').modal('show'); return false; }
                obj.onpaste = function(event) {$('#rdialog').modal('show'); return false; }
                obj.oncut = function(event) { codeEditor.undo();  $('#rdialog').modal('show'); return false; }
                $('#sqlEditorDialog').bind('dragover drop', function(event){
                    codeEditor.undo();
                    $('#rdialog').modal('show');
                    return false;
                });
            }
        }
}

function executeDbmsOnlineScript(pUrl,savetype,probId) {  
    if(codeEditor.getSelection().length != 0) {
        document.getElementById('program').value = codeEditor.getSelection();
    } else {
        document.getElementById('program').value = codeEditor.getValue();    
    }
    document.getElementById('savetype').value = savetype;
    document.getElementById('metricString').value=metricString.substring(0,metricString.length-1);
    var flag = 1;

    if(savetype === 2) {

        if(initdbmsquery === document.getElementById('program').value)
            flag = 0;
        //alert(initdbmsquery+","+document.getElementById('program').value+","+flag);

    }
    else{ 
        $("#observations-"+probId).removeClass("alert alert-success");
        $("#observations-"+probId).removeClass("alert alert-danger");
        $("#observations-"+probId).jmspinner();
        
    }  
    if(flag ===1) {
        requestObj = {
            url:pUrl,
            type:'POST',
            success:function(data){executeDbmsOnlineScriptReady(data,savetype,probId)},
            error:function(req) {
                $("#observations-"+probId).jmspinner(false);
                $("#observations-"+probId).hide();
                errorCall(req);
            },
            //form: dojo.byId('executeDbmsForm'),
            //data:$('#executeDbmsForm').serializeArray(),
            data:serializeForm('executeDbmsForm'),"dummy":new Date().getTime(),
            timeout: ptimeout
        };
        $.ajax(requestObj);
    }

}

function executeDbmsOnlineScriptReady(data,savetype,probId) {
     
    if(savetype == undefined){
        savetype = document.getElementById('savetype').value;
    }
    if(savetype == 5){        
        if(data.indexOf("Your Query has been sent for Evaluation") != -1){
            userLatestSubmission(probId);
        }
        else{
            $("#observations-"+probId).attr("class","alert alert-danger");
            $("#observations-"+probId).html(data); 
            var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations-"+probId+"\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
            $("#observations-"+probId).prepend(closeString)
        }
        initdbmsquery = document.getElementById('program').value;
    }
    else if(savetype != 2) {        
        if(data.search('SQL ERROR:') !=-1 || data.search('Failed to execute:') !=-1 || data.search('java.sql.SQLException:') !=-1 ) {
            $("#observations-"+probId).attr("class","alert alert-danger");            
            var str = "java.sql.SQLException:";
            str = data.replace(str, "");  
            $("#observations-"+probId).html(str);
            var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations-"+probId+"\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
            $("#observations-"+probId).prepend(closeString)
        }
        else {
            $("#observations-"+probId).attr("class","alert alert-success");            
            $("#observations-"+probId).html(data);
            var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations-"+probId+"\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
            $("#observations-"+probId).prepend(closeString)
        }
        $("#observations-"+probId).jmspinner(false);        
        if(savetype == 4) { // To update executed Queries Div
//            showExecutedQueries();            
            appendExecutedQueryOnline();
        }
        initdbmsquery = document.getElementById('program').value;
    }
    else { //AutoSave - Query reset
        initdbmsquery = document.getElementById('program').value;
    }
}

function appendExecutedQueryOnline(){
    var query = codeEditor.getValue();
    var key = "j"+new Date().getTime();
    if(query.trim() !== ""){
        var rowString = "<div class='ex-query-panel'>"
          rowString += "<span id='q"+key+"' class='ex-query'>"+query+"</span><span class='ex-query-icon'><a onclick='moveToDbmsEditor(\""+key+"\");' href='javascript:void(0)'>COPY TO EDITOR</a>";
        rowString+"</span></div>";
        $("#showExecutedQueries").append(rowString);
        $('#accordion-prev-executed-queries').show(); 
    }
}

function userLatestSubmission(probId) {
    requestObj = {
        url: $("#statusLink").val(),
        data: {
            "selectedProblemId": $("#probsId").val(),
            "compid": $("#compid").val(),
            "editor": 1,
            "dummy": new Date().getTime()
        },
        success: function(result) {
            if (result == "Evaluating") {
                if (statusCallCount < 5) {                    
                    statusCallCount++;
                    setTimeout(userLatestSubmission, 5000, probId);
                }
                else {                    
                    statusCallCount = 0;
                    $("#observations-"+probId).jmspinner(false);
                    $("#observations-"+probId).attr("class", "alert alert-success");
                    $("#observations-"+probId).html("<strong>Your query is taking long time to validate.....Please check your query..!</strong>");
                    var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations-"+probId+"\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                    $("#observations-"+probId).prepend(closeString)
                }
            }
            else {
                    statusCallCount = 0;
                    $("#observations-"+probId).jmspinner(false);
                    if (result.search('Kindly') != -1) {
                        $("#observations-"+probId).attr("class", "alert alert-success");
                        $("#observations-"+probId).html(result);
                        var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations-"+probId+"\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                        $("#observations-"+probId).prepend(closeString)
                    }
                    else {
                        $("#observations-"+probId).jmspinner(false);
                        $("#observations-"+probId).hide();
                        $("#submission-status-show").html(result);
                        $(".ebox-popover").hide();
                        $(".ebox-popover.attempt-status-popover").css("display","block") 
                    }
                }
            },
            error:function(req) {
                $("#observations-"+probId).jmspinner(false);
                    $("#observations-"+probId).hide();
                    errorCall(req);
            }
    };
    $.ajax(requestObj);
}


function projectSubmissionStatus(pUrl,evalFlag) {
    var componentId, gameURL = "";
    if(document.getElementById("componentId")) {
        componentId = document.getElementById("componentId").value;
    }
    
    var asuid = document.getElementById("amphiSessionUserAttemptId").value;
    var probId = document.getElementById("probId").value;
    var timeOut = 0;
    var competitiveAssessment;
    if(document.getElementById("gameURL")) {
        gameURL = document.getElementById("gameURL").value;
        timeOut = document.getElementById("gameTimeOut").value;
    }
    if(document.getElementById("competitiveAssessment")){
        competitiveAssessment = document.getElementById("competitiveAssessment").value
    }
    requestObj = {
        url: pUrl,
        type:'POST',        
        timeout: 25000,
        data: {"selectedProblemId":document.getElementById("probId").value,"compid":document.getElementById("compid").value,
            "dummy":new Date().getTime(),"asuaId":document.getElementById('amphiSessionUserAttemptId').value, "evalFlag":evalFlag},

        success: function(data, textStatus) {
            var result = $.trim(data);
            if(result === "Your code is taking long time to validate.....Please check your code..!"){
                if(proStatusCallCount < 5){
                    proStatusCallCount++;
                    getStatusCall = setTimeout(projectSubmissionStatus, 5000, pUrl,0);
                }else{
                    $("#submitworkspacelink").prop("disabled",false);
                    proStatusCallCount = 0;
                    $("#observations").hide();
                    $("#submitworkspacelink").prop("disabled",false);
                    $('#submission-loading').jmspinner(false);
                    $("#observations").attr("class","alert alert-success");
                    $("#observations").html(result)
                    var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                    $("#observations").prepend(closeString)
                    $("#observations").show();
                }
            }else{
                proStatusCallCount = 0;
                $("#observations").hide();
                $("#submitworkspacelink").prop("disabled",false);
                $('#submission-loading').jmspinner(false);                                
                $(".ebox-popover").hide();                
                if(gameURL!=null && gameURL!="") {
                    checkComponentCompleted(componentId, gameURL, asuid,probId,timeOut);
                }else{
                    if (competitiveAssessment == "true" || $('#adaptiveAssessmentSession').val() == "true") {
                        if (data.indexOf("Accepted") > 1) {
                            if($('#adaptiveAssessmentSession').val() == "true"){
                                $("#acceptdStatusModal").modal("show");
                            }
                            else{
                                ballonexplode(componentId);
                            }
                        }
                        else {
                            $("#wrongAnswerStatusModal").modal("show");
                        }
                    }
                    else{
                        $("#submission-status-show").html(data);
                        $(".ebox-popover.attempt-status-popover").css("display","block")
                    }
                }
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            clearTimeout(getStatusCall);
            var statusString = "Your code is taking long time to validate.....Please click status button..!"
            $("#sendForSub").prop("disabled",false);
            $('#submission-loading').jmspinner(false);
            $("#observations").show();
            $("#observations").attr("class","alert alert-success");
            $("#observations").html(statusString);                       
        }
    };
    $.ajax(requestObj);
}

function showSubmissionStatus(pUrl){    
    clearTimeout(getStatusCall);
    $("#observations").hide();
    $('#submission-status-pane').hide();
    $('#submission-loading').jmspinner();
    $.ajax({
        url:pUrl,
        timeout: 15000,
        success: function(data) {
            $("#observations").hide();
            $("#sendForSub").prop("disabled",false);
            $('#submission-loading').jmspinner(false);
            $("#submission-status-pane").html(data);
            $("#submission-status-pane").show();
            $('#submission-action a').find('.fa-window-maximize').remove();
            $('#submission-action a').html("<i class='fa fa-minus' aria-hidden='true'></i>");
            $('#recent-submission').hide();
            $('#recent-submission-expand').show();            
        },
        error: function(req) {
            $("#submission-loading").jmspinner(false);
            errorCall(req);
        }
    });
}

function programSubmissionStatus(pUrl,evalFlag) {
    var componentId = document.getElementById("componentId").value;
    var gameURL = "";
    var asuid = document.getElementById("asuaId").value;
    var probId = document.getElementById("execprobid").value
    var timeOut = 0;
    var competitiveAssessment
    if(document.getElementById("gameURL")) {
        gameURL = document.getElementById("gameURL").value;
        timeOut = document.getElementById("gameTimeOut").value;
    }
    if(document.getElementById("competitiveAssessment")){
       competitiveAssessment = document.getElementById("competitiveAssessment").value
    }
    requestObj = {
        url: pUrl,
        type:'POST',
        timeout: 25000,
        data: {"selectedProblemId":document.getElementById("execprobid").value,"id":document.getElementById("componentId").value,
            "dummy":new Date().getTime(),"asuaId":document.getElementById('asuaId').value , "evalFlag" : evalFlag},

        success: function(data, textStatus) {
            var result = $.trim(data);
            if(result === "Your code is taking long time to validate.....Please check your code..!"){  
                if(statusCallCount < 5){
                    statusCallCount++;
                    getStatusCall = setTimeout(programSubmissionStatus, 5000, pUrl,0);
                }else{
                    $("#sendForSub").prop("disabled",false);
                    statusCallCount = 0;  
                    $("#observations").hide();
                    $('#submission-loading').jmspinner(false);  
                    $("#observations").attr("class","alert alert-success");
                    $("#observations").html(result)
                    var closeString = "<a href='javascript:void(0);' title='Close' onclick='jQuery(\"#observations\").hide();' style='float: right;'><i class='fa fa-close'></i></a>"
                    $("#observations").prepend(closeString)
                    $("#observations").show();
                }
            }else{
                if($('#computeComplexity').val() == "true" && $('#complexityCallBack').val() == "false"){
                    $('#complexityCallBack').val("true"); 
                    getStatusCall = setTimeout(programSubmissionStatus, 5000, pUrl,0);
                }
                else{
                    $('#complexityCallBack').val("false");
                    statusCallCount = 0;
                    $("#observations").hide();
                    $("#sendForSub").prop("disabled",false);
                    $('#submission-loading').jmspinner(false);                
                    $(".ebox-popover").hide();

                    if(gameURL!=null && gameURL!="") {
                        checkComponentCompleted(componentId, gameURL, asuid,probId,timeOut);
                    }else{                    
                        if (competitiveAssessment == "true" || $('#adaptiveAssessmentSession').val() == "true") {
                            if (data.indexOf("Accepted") > 1) {
                                if($('#adaptiveAssessmentSession').val() == "true"){
                                    $("#acceptdStatusModal").modal("show");
                                    $("#submission-status-show").html(data);
                                }
                                else{
                                    ballonexplode(componentId);
                                }
                            }
                            else {
                                $("#wrongAnswerStatusModal").modal("show");
                            }
                        }
                        else{
                            $("#submission-status-show").html(data);
                            $(".ebox-popover.attempt-status-popover").css("display","block")                           
                        }
                        if(!(data.indexOf("Accepted") > 1)){
                            if($("#isEditorialPresent").val() == "true"){
                                var nonAcceptedSubCount = parseInt($("#nonAcceptedSubCount").val())
                                var allowedNonAcceptedSubCount = parseInt($("#allowedNonAcceptedSubCount").val())
                                nonAcceptedSubCount++;                            
                                if(nonAcceptedSubCount > allowedNonAcceptedSubCount){                               
                                    $(".titbit").show();
                                    if(!$('#titbit-notification').hasClass('open')){
                                        $('#titbit-dropdown').attr('data-toggle','dropdown');
                                        $('#titbit-dropdown').click();
                                    }
                                }
                                $("#nonAcceptedSubCount").val(nonAcceptedSubCount)
                            }
                        }
                    }
                }
            }
        },
        error: function(jqXHR, textStatus, errorThrown) {
            clearTimeout(getStatusCall);
            $('#complexityCallBack').val("false");
            var statusString = "Your code is taking long time to validate.....Please click status button..!"
            $("#sendForSub").prop("disabled",false);
            $('#submission-loading').jmspinner(false);
            $("#observations").show();
            $("#observations").attr("class","alert alert-success");
            $("#observations").html(statusString);                       
        }
    };
    $.ajax(requestObj);
}

function checkComponentCompleted(componentId,url, asuid,probId, timeOut){
    $.ajax({
        url:url,
        data:{"componentId":componentId, "asuid":asuid,"probId":probId,"submit":true},
        dataType:'json',
        success: function(data) {
            if(data.page=="Won" || data.page=="Lose"){
                setTimeout(function(){ 
                    if(data.page=="Won")
                        $('#gameWonModal').show();
                    else
                        $('#gameLoseModal').show();
                    setTimeout(function(){ 
                        window.location = data.url;
                    }, 3000);
                }, timeOut);
            }
        },
        error: function(data) {
            hideWait();
        }
    });
}

function ballonexplode(componentId){
    $(".balloon > div:nth-child(1)").addClass("baloonactive");
    balooncongratz();
    var element = $(".balloon > div:nth-child(1)");
    element.click(function(){
        setTimeout(function(){
            element.removeClass("baloonactive").hide();
            $(".congrats").hide("slow");
        },1000);
    });
    setTimeout(function(){
        element.removeClass("baloonactive").hide();
        $(".congrats").hide('slow');
    },10000);
    $(document).keydown(function(e) {
        if(e.keyCode == 27) {
            element.removeClass("baloonactive").hide();
            $(".congrats").hide("slow");
        }
    });
    
}

function competitiveAssessment(latestSubmissionUrl){
    var liveCompetitiveDataUrl =  document.getElementById("liveCompetitiveDataUrl").value;
    var currentUserDataUrl=document.getElementById("currentUserDataUrl").value;
    var currentUserProblemLevelUrl=document.getElementById("currentUserProblemLevel").value;
    var competitiveTimeOut = document.getElementById("competitiveTimeOut").value;
    loadLiveSubmissionStack(liveCompetitiveDataUrl);
    setInterval(function(){
         loadLiveSubmissionStack(liveCompetitiveDataUrl);
         $.ajax({
            url: currentUserDataUrl,
            data : {
              "compId" : $('#compid').val(),
              "amphiSessionUserAttemptId" : $('#amphiSessionUserAttemptId').val(),
            },
            success:function(data) {
                var d = document.createElement('div');
                $(d).html(data);
                var rank = $(d).find('#user-rank').html();
                $('#user-rank').empty().append(rank);
                $("#newsticker").empty().append($(d).find('#newsticker').html());
                $(".default-profile" ).ready(function() {
                    $('.default-profile').initial(); 
                    $('.default-profile').initial({textColor:"#37224a"});
                    $('.default-profile').initial({color:"#C0C0C0"});
                });
                $("#problem-overview").empty().append($(d).find('#problem-overview').html());
            }
        });
    },competitiveTimeOut);
    
    setInterval(function(){
        $.ajax({
            url: currentUserProblemLevelUrl,
            data : {
              "compId" : $('#compid').val(),
              "amphiSessionUserAttemptId" : $('#amphiSessionUserAttemptId').val(),
            },
            success:function(data) {
                $("#box-two").empty().append(data);
            }
        });
        $.ajax({
            url: latestSubmissionUrl,
            data : {
              "compId" : $('#compid').val(),
              "amphiSessionUserAttemptId" : $('#amphiSessionUserAttemptId').val(),
            },
            success:function(data) {
                $("#others-balloon").empty().append(data);
                var buttons = Array.from(document.querySelectorAll("[data-balloon]")); 
                var count=0;
                var colorArray = ["linear-gradient(to top , pink, violet","linear-gradient(to right top, #f8abab, #ff8e8d, #ff6f6d, #ff4b4b, #ff0727)","linear-gradient(to right top, #e4abf8, #e895f7, #ef7bf3, #f75aec, #ff22e2)","linear-gradient(to right top, #71a0e7, #00bffe, #00d8de, #00e88e, #a8eb12)","linear-gradient(to top , darkgreen, Lime"];
                var colorCount = 0;
                buttons.forEach(function (button) {
                  var random = Math.floor(Math.random() * (+1 - +5)) + +5; 
                  $(button).find(".other-balloon").css("background-image",colorArray[random]);
                  button.addEventListener("click", function (e) {
                    count++;
                    window.confetti(button, confettis_conf[3]);
                    var id = "#other-user-balloon"+count;
                    $(id).hide();
                  });
                  colorCount++;
                });
                var balloonfly_count = 1,ballonblast_Count=1;
                setInterval(function(){
                    if(balloonfly_count<=buttons.length){
                        $("[data-balloon="+balloonfly_count+"]").show();
                        $("[data-balloon="+balloonfly_count+"]").addClass("other-balloon-fly");
                        balloonfly_count++;
                    }
                },3000)
                setInterval(function(){
                    if(ballonblast_Count<=buttons.length){
                        $("[data-balloon="+ballonblast_Count+"]").trigger('click');
                        ballonblast_Count++;
                    }
                },4000)
            }
        });
    },20000);
}

function loadLiveSubmissionStack(liveCompetitiveDataUrl){
    $.ajax({
        url: liveCompetitiveDataUrl,
        data : {
          "compId" : $('#compid').val(),
          "amphiSessionUserAttemptId" : $('#amphiSessionUserAttemptId').val(),

        },
        dataType:'json',
        success:function(data){
              var liTag="";
              for(var i=0;i<data.length;i++){
                  liTag += "<li class='live-sub'><i class='cc prof-pic hi-icon'>";
                  if(data[i].profilePicUrl=="false"){
                      liTag+="<img data-name='"+data[i].username+"' class='default-profile' id='default-profile'/>";
                  }
                  else{
                      liTag+="<img src='"+data[i].profilePicUrl+"'/>"
                  }
                  liTag+="</i><span class='st-name'>";
                  if(data[i].liveUser=="false"){
                     liTag+=data[i].username+"</span>"; 
                  }
                  else{
                      liTag+="You</span>"; 
                  }
                  if(data[i].submissionStatus=="Accepted"){
                     liTag+="<span class='task-completed'>"+data[i].problemName+" - <span class='prog-level'>"+data[i].submissionStatus+"</span></span></li>";
                  }
                  else if(data[i].submissionStatus=="Wrong Answer"){
                     liTag+="<span class='task-error'>"+data[i].problemName+" - <span class='prog-level'>"+data[i].submissionStatus+"</span></span></li>";
                  }
                  else if(data[i].submissionStatus=="Time Limit Exceeded"){
                     liTag+="<span class='task-time'>"+data[i].problemName+" - <span class='prog-level'>"+data[i].submissionStatus+"</span></span></li>";
                  }
                  else{
                     liTag+="<span class='task-progress'>"+data[i].problemName+" - <span class='prog-level'>"+data[i].submissionStatus+"</span></span></li>";
                  }
              }
              if($("#competitiveData").children("#sub-stack-data").html()){
                    $("#webticker").webTicker('update',liTag,'swap',true,false);
              }
              else if(data.length>=1){
                 var htmlWebTicker = "<section class='task-status' id='sub-stack-data'><div class='box box-inverse box-dark'><div class='box-body tickers-block'><ul id='webticker'>";
                 var divClose="</ul></div></div></section>";
                 $("#competitiveData").empty().append(htmlWebTicker+divClose);
                 $("#webticker").empty().append(liTag); 
                $("#webticker").webTicker({
                    height:'auto', 
                    duplicate:true, 
                    startEmpty:false, 
                    rssfrequency:5
		});
                callBackAttempt();
              }
              $(".default-profile" ).ready(function() {
                $('.default-profile').initial(); 
                $('.default-profile').initial({textColor:"#37224a"});
                $('.default-profile').initial({color:"#C0C0C0"});
              });
        }
    });
}

function executeSystemTestcaseOnline(pUrl,showModal) {
        clearTimeout(getStatusCall);
        $("#sendForSub").prop("disabled",false);
        document.getElementById("savetype").value = 6
        requestObj = {
            url: pUrl,
            type:'POST',
            error: errorCall,
            timeout: ptimeout,
            data: {"program":codeEditor.getValue(),"selectedLangId":document.getElementById("selectedLangId").value,"dummy":new Date().getTime(),"execprobid":document.getElementById("execprobid").value,
                "id":document.getElementById("componentId").value,"asuaId":document.getElementById('asuaId').value,"savetype":document.getElementById("savetype").value,"readOnlyLines":codeEditor.obtainReadOnlyLines()},
            success: function(data, textStatus) {
                    $("#observations").hide();
                    data = checkCommonIssues(data);
                    document.getElementById("systemTestcase").innerHTML = data;
                    hideWait();
                    $(".ebox-popover").hide();
                    $('.popoveroverlay').hide();
                    $(".ebox-popover.test-case").css("display","block")
                    $('.popoveroverlay').show();
                    $("#previousInputsdiv").hide();
            }
        };
        showWait();
        $.ajax(requestObj);

}


function obtainPreviousSubmissionOnline(pUrl) {
    clearTimeout(getStatusCall);
    requestObj = {
        url: pUrl,
        type: 'POST',
        error: errorCall,
        timeout: ptimeout,
        data: {"dummy": new Date().getTime(),
            "id": document.getElementById("componentId").value, "execprobid": document.getElementById("execprobid").value, "asuaId": document.getElementById('asuaId').value},
        success: function (data, textStatus) {
            $("#observations").hide();
            data = checkCommonIssues(data);
            document.getElementById("previous-submission-data").innerHTML = data;
            hideWait();
            $(".ebox-popover").hide();
            $('.popoveroverlay').hide();
            $(".ebox-popover.previous-submission").css("display", "block")
            $('.popoveroverlay').show();
        }
    };
    showWait();
    $.ajax(requestObj);
}

function obtainPreviousSubmissionProjectOnline(pUrl) {
    clearTimeout(getStatusCall);
    requestObj = {
        url: pUrl,
        type: 'POST',
        error: errorCall,
        timeout: ptimeout,
        data: {"dummy": new Date().getTime()},
        success: function (data, textStatus) {
            $("#observations").hide();
            data = checkCommonIssues(data);
            document.getElementById("previous-submission-data").innerHTML = data;
            hideWait();
            $(".ebox-popover").hide();
            $('.popoveroverlay').hide();
            $(".ebox-popover.previous-submission").css("display", "block")
            $('.popoveroverlay').show();
        }
    };
    showWait();
    $.ajax(requestObj);
}

function obtainPreviousSubmissionDbmsOnline(pUrl, probId) {
    clearTimeout(getStatusCall);
    $("#observations-"+probId).jmspinner(true);
    requestObj = {
        url: pUrl,
        type: 'POST',
        error: errorCall,
        timeout: ptimeout,
        data: {"selectedProblemId": $("#probsId").val(),
            "compid": $("#compid").val(),
            "editor": 1,
            "dummy": new Date().getTime()},
        success: function (data, textStatus) {
            $("#observations-"+probId).jmspinner(false);
            $("#observations").hide();
            data = checkCommonIssues(data);
            document.getElementById("previous-submission-data").innerHTML = data;
            hideWait();
            $(".ebox-popover").hide();
            $('.popoveroverlay').hide();
            $(".ebox-popover.previous-submission").css("display", "block")
            $('.popoveroverlay').show();
        }
    };
    showWait();
    $.ajax(requestObj);
}


function projectExecuteSolutionTestcaseOnline(pUrl) {
    var selectedLang = window.frames["editorFrame"].document.getElementById("selectedLangName").value;
        if(selectedLang.toLowerCase() === "selenium"){
            validateSeleniumApplication();
        }else{           
            requestObj = {
                url: pUrl,
                type:'POST',
                error: errorCall,
                timeout: ptimeout,
                data: {"selectedLangId":document.getElementById("selectedLang").value,"dummy":new Date().getTime()},
                success: function(data, textStatus) {
                        data = checkCommonIssues(data);
                        document.getElementById("systemTestcase").innerHTML = data;
                        hideWait();
                        $(".ebox-popover").hide();
                        $('.popoveroverlay').hide();
                        $(".ebox-popover.test-case").css("display","block")
                        $('.popoveroverlay').show();
                        $("#previousInputsdiv").hide();
                }
            };
            showWait();
            $.ajax(requestObj);
        }    
}

function validateSeleniumApplicationOnline() {
    showWait();
    var selectedLang = document.getElementById("selectedLang").value;
    $.ajax({
        url: contextPath+'/projectComponent/validateSeleniumProject',
        data: {"selectedLang":selectedLang},
        success: function(data) {
            document.getElementById('systemTestcase').innerHTML = data;
            hideWait();
            $(".ebox-popover").hide();
            $('.popoveroverlay').hide();
            $(".ebox-popover.test-case").css("display","block")
            $('.popoveroverlay').show();
            $("#previousInputsdiv").hide();
        },
        error: function() {
            alert("Unable to execute the application");
            errorCall()
        }
    });
}

function projectCompQueryEditor(lang){
    if(!projCompSqlQury){
            projCompSqlQury = CodeMirror.fromTextArea(document.getElementById("projCompSqlQury"), {
            lineNumbers: true,
            matchBrackets: true,
            autofocus: true,
            mode: lang
        });
    }
    $("#projCompSqlPane").slideDown("slow");
}

function execProjectCompQuery(url){
    $("#queryResult").jmspinner();
    $('#queryResultDiv').show();
    $.ajax({
        url : url,
        type: "POST",
        data:{
        "query":projCompSqlQury.getValue(),
        "dummy":(new Date().getTime())
        },
        before:function(){showWait()},
        success:function(data){
            $('#queryResultDiv').show();
            if(data.startsWith("Please")) {
                $("#queryResult").css('color','red');
            } else {
                $("#queryResult").css('color','black');
            }
            $("#queryResult").html(data);
            hideWait();
        }
    });
}


